{"version":3,"sources":["webpack://angularBS/webpack/universalModuleDefinition","webpack://angularBS/./.build/src/lib/angularBS.module.ts","webpack://angularBS/./.build/lib/lib/angularBS.module.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-indicators.component.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-indicators.component.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-item.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-item.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-nav.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-nav.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/carousel.module.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/carousel.module.js","webpack://angularBS/./.build/lib/src/lib/carousel/carousel.provider.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/carousel.provider.js","webpack://angularBS/./.build/lib/src/lib/collapse/bs-collapse-group.directive.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/bs-collapse-group.directive.js","webpack://angularBS/./.build/lib/src/lib/collapse/bs-collapse.directive.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/bs-collapse.directive.js","webpack://angularBS/./.build/lib/src/lib/collapse/collapse.module.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/collapse.module.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown-boundary.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown-toggle.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/dropdown.module.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/dropdown.module.js","webpack://angularBS/./.build/lib/src/lib/helpers/angularBS.service.ts","webpack://angularBS/./.build/lib/helpers/lib/helpers/angularBS.service.js","webpack://angularBS/./.build/lib/src/lib/helpers/helpers.module.ts","webpack://angularBS/./.build/lib/helpers/lib/helpers/helpers.module.js","webpack://angularBS/./.build/lib/src/lib/modal/bs-modal-backdrop.component.ts","webpack://angularBS/./.build/lib/modal/lib/modal/bs-modal-backdrop.component.js","webpack://angularBS/./.build/lib/src/lib/modal/bs-modal.directive.ts","webpack://angularBS/./.build/lib/modal/lib/modal/bs-modal.directive.js","webpack://angularBS/./.build/lib/src/lib/modal/dismiss.directive.ts","webpack://angularBS/./.build/lib/modal/lib/modal/dismiss.directive.js","webpack://angularBS/./.build/lib/src/lib/modal/modal-backdrop.factory.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal-backdrop.factory.js","webpack://angularBS/./.build/lib/src/lib/modal/modal.module.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal.module.js","webpack://angularBS/./.build/lib/src/lib/modal/modal.provider.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal.provider.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover-boundary.directive.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover-toggle.directive.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover.component.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover.component.js","webpack://angularBS/./.build/lib/src/lib/popover/popover.module.ts","webpack://angularBS/./.build/lib/popover/lib/popover/popover.module.js","webpack://angularBS/./.build/lib/src/lib/popover/popover.provider.ts","webpack://angularBS/./.build/lib/popover/lib/popover/popover.provider.js","webpack://angularBS/./.build/lib/src/lib/toasts/bs-toast.component.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/bs-toast.component.js","webpack://angularBS/./.build/lib/src/lib/toasts/toasts.module.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/toasts.module.js","webpack://angularBS/./.build/lib/src/lib/toasts/toasts.provider.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/toasts.provider.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip-boundary.directive.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip-toggle.directive.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip.component.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip.component.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip.factory.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip.factory.js","webpack://angularBS/./.build/lib/src/lib/tooltip/tooltip.module.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/tooltip.module.js","webpack://angularBS/./.build/lib/src/lib/tooltip/tooltip.provider.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/tooltip.provider.js","webpack://angularBS/external \"angular\"","webpack://angularBS/external \"angular-animate\"","webpack://angularBS/webpack/bootstrap","webpack://angularBS/webpack/runtime/compat get default export","webpack://angularBS/webpack/runtime/define property getters","webpack://angularBS/webpack/runtime/hasOwnProperty shorthand","webpack://angularBS/webpack/runtime/make namespace object","webpack://angularBS/./src/angularjs-bootstrap-4.ts","webpack://angularBS/./.build/angularjs-bootstrap-4.js"],"names":[],"mappings":"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","file":"angularjs-bootstrap-4.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"angular-animate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angularjs-bootstrap-4\", [\"angular\", \"angular-animate\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-bootstrap-4\"] = factory(require(\"angular\"), require(\"angular-animate\"));\n\telse\n\t\troot[\"angularjs-bootstrap-4\"] = factory(root[\"angular\"], root[\"angular-animate\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_angular__, __WEBPACK_EXTERNAL_MODULE_angular_animate__) {\nreturn ","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {angularBSCarousel} from './carousel/carousel.module';\nimport {angularBSCollapse} from './collapse/collapse.module';\nimport {angularBSDropdown} from './dropdown/dropdown.module';\nimport {angularBSModal} from './modal/modal.module';\nimport {angularBSPopover} from './popover/popover.module';\nimport {angularBSToasts} from './toasts/toasts.module';\nimport {angularBSTooltip} from './tooltip/tooltip.module';\n\nconst angularBSModule = angular.module('angularBS', [\n    angularBSModal, angularBSDropdown, angularBSTooltip, angularBSPopover, angularBSCollapse,\n    angularBSCarousel, angularBSToasts\n]);\n\nexport const angularBS = angularBSModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { angularBSCarousel } from './carousel/carousel.module';\nimport { angularBSCollapse } from './collapse/collapse.module';\nimport { angularBSDropdown } from './dropdown/dropdown.module';\nimport { angularBSModal } from './modal/modal.module';\nimport { angularBSPopover } from './popover/popover.module';\nimport { angularBSToasts } from './toasts/toasts.module';\nimport { angularBSTooltip } from './tooltip/tooltip.module';\nconst angularBSModule = angular.module('angularBS', [\n    angularBSModal, angularBSDropdown, angularBSTooltip, angularBSPopover, angularBSCollapse,\n    angularBSCarousel, angularBSToasts\n]);\nexport const angularBS = angularBSModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const bsCarouselIndicatorsComponent: IComponentOptions = {\n    template: '<ol class=\"carousel-indicators\">'\n        + '<li ng-repeat=\"s in ctrl.carousel.slides\" ng-click=\"ctrl.carousel.slideTo($index)\" '\n        + 'ng-class=\"{active: $index === ctrl.carousel.currentSlide}\"></li>'\n        + '</ol>',\n    require: {\n        carousel: '^bsCarousel'\n    },\n    controllerAs: 'ctrl'\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport const bsCarouselIndicatorsComponent = {\n    template: '<ol class=\"carousel-indicators\">'\n        + '<li ng-repeat=\"s in ctrl.carousel.slides\" ng-click=\"ctrl.carousel.slideTo($index)\" '\n        + 'ng-class=\"{active: $index === ctrl.carousel.currentSlide}\"></li>'\n        + '</ol>',\n    require: {\n        carousel: '^bsCarousel'\n    },\n    controllerAs: 'ctrl'\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nclass BsCarouselItemDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n\n    $onInit() {\n        this.$element.addClass('carousel-item');\n    }\n}\n\nexport function bsCarouselItemDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl.register(element);\n        },\n        controller: BsCarouselItemDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nclass BsCarouselItemDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n    $onInit() {\n        this.$element.addClass('carousel-item');\n    }\n}\nexport function bsCarouselItemDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl.register(element);\n        },\n        controller: BsCarouselItemDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\nexport function bsCarouselNavDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function(scope, element, attrs, ctrl) {\n            element.on('click', function() {\n                ctrl.prevNextSlide(attrs['bsCarouselNav'] === 'right');\n                scope.$digest();\n            });\n        }\n    };\n}\n","export function bsCarouselNavDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function (scope, element, attrs, ctrl) {\n            element.on('click', function () {\n                ctrl.prevNextSlide(attrs['bsCarouselNav'] === 'right');\n                scope.$digest();\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, IDirective, IIntervalService, IScope} from 'angular';\nimport {ICarouselOptions} from './carousel.provider';\nimport * as angular from 'angular';\n\ntype direction = 'left' | 'right';\n\n/**\n * @ngInject\n */\nclass BsCarouselDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private readonly $attrs: IAttributes;\n    private readonly $interval: IIntervalService;\n    private Carousel: ICarouselOptions;\n    private carouselInterval = null;\n    private slides = [];\n    private currentSlide = -1;\n    private sliding = false;\n    private wrap: boolean;\n    private keyboard: boolean;\n\n    constructor(\n        $scope: IScope, $element: JQLite, $attrs: IAttributes, $interval: IIntervalService,\n        Carousel: ICarouselOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$interval = $interval;\n        this.Carousel = Carousel;\n\n        this.$element.on('keydown', (e) => {\n            if (\n                !this.keyboard\n                || (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight')\n                || /input|textarea/i.test(e.target.tagName)\n            ) {\n                return;\n            }\n            if (e.key === 'ArrowLeft') {\n                this.prevNextSlide(false);\n            } else {\n                this.prevNextSlide(true);\n            }\n            $scope.$digest();\n            e.preventDefault();\n        });\n    }\n\n    $onInit(): void {\n        const interval = 'interval' in this.$attrs ? parseInt(this.$attrs['interval']) : this.Carousel.interval,\n            pause = 'pause' in this.$attrs ? this.$attrs['pause'] === 'hover' : this.Carousel.pause;\n        if (interval) {\n            const cycle = () => {\n                this.carouselInterval = this.$interval(() => {\n                    this.prevNextSlide(true);\n                }, interval);\n            };\n            if (pause) {\n                this.$element.on('mouseenter', () => {\n                    this.$interval.cancel(this.carouselInterval);\n                });\n                this.$element.on('mouseleave', cycle);\n            }\n            cycle();\n        }\n    }\n\n    $onChanges(): void {\n        if (angular.isUndefined(this.wrap)) {\n            this.wrap = this.Carousel.wrap;\n        }\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Carousel.keyboard;\n        }\n    }\n\n    $onDestroy() {\n        if (this.carouselInterval !== null) {\n            this.$interval.cancel(this.carouselInterval);\n        }\n    }\n\n    register($element: JQLite): void {\n        this.slides.push($element);\n        if ($element.hasClass('active')) {\n            if (~this.currentSlide) {\n                this.slides[this.currentSlide].removeClass('active');\n            }\n            this.currentSlide = this.slides.length - 1;\n        } else if (!~this.currentSlide) {\n            $element.addClass('active');\n            this.currentSlide = this.slides.length - 1;\n        }\n    }\n\n    unregister($element: JQLite): void {\n        this.slides.splice(this.slides.indexOf($element, 1));\n    }\n\n    prevNextSlide(isNext: boolean): void {\n        const nextIndex = isNext ? this.currentSlide + 1 : this.currentSlide - 1;\n        if (\n            (nextIndex >= this.slides.length || nextIndex < 0)\n            && !this.wrap\n        ) {\n            return;\n        }\n        this.slideTo(nextIndex, isNext ? 'left' : 'right');\n    }\n\n    slideTo(index: number, direction: direction): void {\n        if (index < 0) {\n            index = this.slides.length - 1;\n        } else if (index >= this.slides.length) {\n            index = 0;\n        }\n        this.changeSlide(index, direction);\n    }\n\n    private changeSlide(nextSlide: number, direction?: direction) {\n        if (nextSlide !== this.currentSlide && !this.sliding) {\n            this.sliding = true;\n            if (angular.isUndefined(direction)) {\n                direction = nextSlide > this.currentSlide ? 'left' : 'right';\n            }\n            const next = this.slides[nextSlide],\n                active = this.slides[this.currentSlide],\n                transition = () => {\n                    active[0].removeEventListener('transitionend', transition);\n                    next.removeClass(\n                        'carousel-item-next carousel-item-prev carousel-item-' + direction)\n                        .addClass('active');\n                    active.removeClass('active carousel-item-' + direction);\n                    this.sliding = false;\n                };\n            next.addClass(direction === 'left' ? 'carousel-item-next' : 'carousel-item-prev');\n            next[0].offsetWidth; // force reflow\n            active.addClass('carousel-item-' + direction);\n            next.addClass('carousel-item-' + direction);\n            active[0].addEventListener('transitionend', transition);\n            this.currentSlide = nextSlide;\n        }\n    }\n}\n\nexport function bsCarouselDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsCarousel\n     *\n     * @param interval\n     * @param pause\n     * @param {expression|boolean} wrap\n     * @param {expression|boolean} keyboard\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            wrap: '<?',\n            keyboard: '<?'\n        },\n        controller: BsCarouselDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsCarouselDirectiveController {\n    constructor($scope, $element, $attrs, $interval, Carousel) {\n        this.carouselInterval = null;\n        this.slides = [];\n        this.currentSlide = -1;\n        this.sliding = false;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$interval = $interval;\n        this.Carousel = Carousel;\n        this.$element.on('keydown', (e) => {\n            if (!this.keyboard\n                || (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight')\n                || /input|textarea/i.test(e.target.tagName)) {\n                return;\n            }\n            if (e.key === 'ArrowLeft') {\n                this.prevNextSlide(false);\n            }\n            else {\n                this.prevNextSlide(true);\n            }\n            $scope.$digest();\n            e.preventDefault();\n        });\n    }\n    $onInit() {\n        const interval = 'interval' in this.$attrs ? parseInt(this.$attrs['interval']) : this.Carousel.interval, pause = 'pause' in this.$attrs ? this.$attrs['pause'] === 'hover' : this.Carousel.pause;\n        if (interval) {\n            const cycle = () => {\n                this.carouselInterval = this.$interval(() => {\n                    this.prevNextSlide(true);\n                }, interval);\n            };\n            if (pause) {\n                this.$element.on('mouseenter', () => {\n                    this.$interval.cancel(this.carouselInterval);\n                });\n                this.$element.on('mouseleave', cycle);\n            }\n            cycle();\n        }\n    }\n    $onChanges() {\n        if (angular.isUndefined(this.wrap)) {\n            this.wrap = this.Carousel.wrap;\n        }\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Carousel.keyboard;\n        }\n    }\n    $onDestroy() {\n        if (this.carouselInterval !== null) {\n            this.$interval.cancel(this.carouselInterval);\n        }\n    }\n    register($element) {\n        this.slides.push($element);\n        if ($element.hasClass('active')) {\n            if (~this.currentSlide) {\n                this.slides[this.currentSlide].removeClass('active');\n            }\n            this.currentSlide = this.slides.length - 1;\n        }\n        else if (!~this.currentSlide) {\n            $element.addClass('active');\n            this.currentSlide = this.slides.length - 1;\n        }\n    }\n    unregister($element) {\n        this.slides.splice(this.slides.indexOf($element, 1));\n    }\n    prevNextSlide(isNext) {\n        const nextIndex = isNext ? this.currentSlide + 1 : this.currentSlide - 1;\n        if ((nextIndex >= this.slides.length || nextIndex < 0)\n            && !this.wrap) {\n            return;\n        }\n        this.slideTo(nextIndex, isNext ? 'left' : 'right');\n    }\n    slideTo(index, direction) {\n        if (index < 0) {\n            index = this.slides.length - 1;\n        }\n        else if (index >= this.slides.length) {\n            index = 0;\n        }\n        this.changeSlide(index, direction);\n    }\n    changeSlide(nextSlide, direction) {\n        if (nextSlide !== this.currentSlide && !this.sliding) {\n            this.sliding = true;\n            if (angular.isUndefined(direction)) {\n                direction = nextSlide > this.currentSlide ? 'left' : 'right';\n            }\n            const next = this.slides[nextSlide], active = this.slides[this.currentSlide], transition = () => {\n                active[0].removeEventListener('transitionend', transition);\n                next.removeClass('carousel-item-next carousel-item-prev carousel-item-' + direction)\n                    .addClass('active');\n                active.removeClass('active carousel-item-' + direction);\n                this.sliding = false;\n            };\n            next.addClass(direction === 'left' ? 'carousel-item-next' : 'carousel-item-prev');\n            next[0].offsetWidth; // force reflow\n            active.addClass('carousel-item-' + direction);\n            next.addClass('carousel-item-' + direction);\n            active[0].addEventListener('transitionend', transition);\n            this.currentSlide = nextSlide;\n        }\n    }\n}\nexport function bsCarouselDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsCarousel\n     *\n     * @param interval\n     * @param pause\n     * @param {expression|boolean} wrap\n     * @param {expression|boolean} keyboard\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            wrap: '<?',\n            keyboard: '<?'\n        },\n        controller: BsCarouselDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {CarouselProvider} from './carousel.provider';\nimport {bsCarouselIndicatorsComponent} from './bs-carousel-indicators.component';\nimport {bsCarouselItemDirective} from './bs-carousel-item.directive';\nimport {bsCarouselNavDirective} from './bs-carousel-nav.directive';\nimport {bsCarouselDirective} from './bs-carousel.directive';\n\nconst carouselModule = angular.module('angularBS.carousel', [])\n    .provider('Carousel', CarouselProvider)\n    .component('bsCarouselIndicators', bsCarouselIndicatorsComponent)\n    .directive('bsCarouselItem', bsCarouselItemDirective)\n    .directive('bsCarouselNav', bsCarouselNavDirective)\n    .directive('bsCarousel', bsCarouselDirective);\n\nexport const angularBSCarousel = carouselModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { CarouselProvider } from './carousel.provider';\nimport { bsCarouselIndicatorsComponent } from './bs-carousel-indicators.component';\nimport { bsCarouselItemDirective } from './bs-carousel-item.directive';\nimport { bsCarouselNavDirective } from './bs-carousel-nav.directive';\nimport { bsCarouselDirective } from './bs-carousel.directive';\nconst carouselModule = angular.module('angularBS.carousel', [])\n    .provider('Carousel', CarouselProvider)\n    .component('bsCarouselIndicators', bsCarouselIndicatorsComponent)\n    .directive('bsCarouselItem', bsCarouselItemDirective)\n    .directive('bsCarouselNav', bsCarouselNavDirective)\n    .directive('bsCarousel', bsCarouselDirective);\nexport const angularBSCarousel = carouselModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface ICarouselOptions {\n    interval: number,\n    pause: 'hover' | null,\n    wrap: boolean,\n    keyboard: boolean\n}\n\nexport class CarouselProvider {\n    public config: ICarouselOptions = {\n        interval: 5000,\n        pause: 'hover',\n        wrap: true,\n        keyboard: true\n    };\n\n    $get(): ICarouselOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class CarouselProvider {\n    constructor() {\n        this.config = {\n            interval: 5000,\n            pause: 'hover',\n            wrap: true,\n            keyboard: true\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\nimport {BsCollapseDirectiveController} from './bs-collapse.directive';\n\n/**\n * @ngInject\n */\nexport class BsCollapseGroupDirectiveController {\n    private children = [];\n\n    register(bsCollapseCtrl: BsCollapseDirectiveController): void {\n        this.children.push(bsCollapseCtrl);\n    }\n\n    unregister(bsCollapseCtrl: BsCollapseDirectiveController): void {\n        this.children.splice(this.children.indexOf(bsCollapseCtrl), 1);\n    }\n\n    expand(invokingCtrl: BsCollapseDirectiveController): void {\n        for (let c = 0; c < this.children.length; c++) {\n            if (this.children[c] !== invokingCtrl) {\n                this.children[c].bsCollapse = true;\n            }\n        }\n    }\n}\n\nexport function bsCollapseGroupDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsCollapseGroupDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n/**\n * @ngInject\n */\nexport class BsCollapseGroupDirectiveController {\n    constructor() {\n        this.children = [];\n    }\n    register(bsCollapseCtrl) {\n        this.children.push(bsCollapseCtrl);\n    }\n    unregister(bsCollapseCtrl) {\n        this.children.splice(this.children.indexOf(bsCollapseCtrl), 1);\n    }\n    expand(invokingCtrl) {\n        for (let c = 0; c < this.children.length; c++) {\n            if (this.children[c] !== invokingCtrl) {\n                this.children[c].bsCollapse = true;\n            }\n        }\n    }\n}\nexport function bsCollapseGroupDirective() {\n    return {\n        restrict: 'A',\n        controller: BsCollapseGroupDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective, IScope} from 'angular';\nimport * as angular from 'angular';\nimport 'angular-animate';\nimport {BsCollapseGroupDirectiveController} from './bs-collapse-group.directive';\n\n/**\n * @ngInject\n */\nexport class BsCollapseDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private readonly $animateCss: angular.animate.IAnimateCssService;\n    private bsCollapse: boolean;\n    private group: BsCollapseGroupDirectiveController;\n\n    constructor($scope: IScope, $element: JQLite, $animateCss: angular.animate.IAnimateCssService) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$animateCss = $animateCss;\n\n        $scope.$watch(() => {\n            return this.bsCollapse;\n        }, (nV) => {\n            this.bsCollapse = !!nV;\n            if (this.bsCollapse) {\n                this.collapse();\n            } else {\n                this.expand();\n                if (this.group) {\n                    this.group.expand(this);\n                }\n            }\n        })\n    }\n\n    $onInit(): void {\n        if (this.bsCollapse) {\n            this.$element.removeClass('show collapsing').addClass('collapse');\n            this.$element.css({height: null});\n        } else {\n            this.$element.removeClass('collapsing').addClass('collapse show');\n        }\n    }\n\n\n    private expand(): void {\n        if (!this.$element.hasClass('show')) {\n            this.$element.removeClass('collapse').addClass('collapsing');\n            if (this.$animateCss) {\n                this.$animateCss(this.$element, {\n                    addClass: 'show',\n                    easing: 'ease',\n                    to: {\n                        height: this.$element[0].scrollHeight + 'px'\n                    }\n                }).start()['finally'](() => {\n                    this.$element.removeClass('collapsing').addClass('collapse').css({height: 'auto'});\n                });\n            }\n        }\n    }\n    private collapse(): void {\n        if (this.$element.hasClass('show')) {\n            this.$element.css({\n                height: this.$element[0].scrollHeight + 'px'\n            }).removeClass('collapse').addClass('collapsing');\n            this.$animateCss(this.$element, {\n                removeClass: 'show',\n                to: {height: '0'}\n            }).start()['finally'](() => {\n                this.$element.css({height: null});\n                this.$element.removeClass('collapsing').addClass('collapse');\n            });\n        }\n    }\n}\n\nexport function bsCollapseDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsCollapse\n     *\n     * @param {expression|boolean} bsCollapse\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsCollapse: '=?'\n        },\n        require: ['bsCollapse', '?^bsCollapseGroup'],\n        link: function(scope, element, attrs, ctrl) {\n            if (ctrl[1] !== null) {\n                ctrl[1].register(ctrl[0]);\n                ctrl[0].group = ctrl[1];\n                scope.$on('destroy', () => {\n                    ctrl[1].unregister(ctrl[0]);\n                });\n            }\n        },\n        controller: BsCollapseDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport 'angular-animate';\n/**\n * @ngInject\n */\nexport class BsCollapseDirectiveController {\n    constructor($scope, $element, $animateCss) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$animateCss = $animateCss;\n        $scope.$watch(() => {\n            return this.bsCollapse;\n        }, (nV) => {\n            this.bsCollapse = !!nV;\n            if (this.bsCollapse) {\n                this.collapse();\n            }\n            else {\n                this.expand();\n                if (this.group) {\n                    this.group.expand(this);\n                }\n            }\n        });\n    }\n    $onInit() {\n        if (this.bsCollapse) {\n            this.$element.removeClass('show collapsing').addClass('collapse');\n            this.$element.css({ height: null });\n        }\n        else {\n            this.$element.removeClass('collapsing').addClass('collapse show');\n        }\n    }\n    expand() {\n        if (!this.$element.hasClass('show')) {\n            this.$element.removeClass('collapse').addClass('collapsing');\n            if (this.$animateCss) {\n                this.$animateCss(this.$element, {\n                    addClass: 'show',\n                    easing: 'ease',\n                    to: {\n                        height: this.$element[0].scrollHeight + 'px'\n                    }\n                }).start()['finally'](() => {\n                    this.$element.removeClass('collapsing').addClass('collapse').css({ height: 'auto' });\n                });\n            }\n        }\n    }\n    collapse() {\n        if (this.$element.hasClass('show')) {\n            this.$element.css({\n                height: this.$element[0].scrollHeight + 'px'\n            }).removeClass('collapse').addClass('collapsing');\n            this.$animateCss(this.$element, {\n                removeClass: 'show',\n                to: { height: '0' }\n            }).start()['finally'](() => {\n                this.$element.css({ height: null });\n                this.$element.removeClass('collapsing').addClass('collapse');\n            });\n        }\n    }\n}\nexport function bsCollapseDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsCollapse\n     *\n     * @param {expression|boolean} bsCollapse\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsCollapse: '=?'\n        },\n        require: ['bsCollapse', '?^bsCollapseGroup'],\n        link: function (scope, element, attrs, ctrl) {\n            if (ctrl[1] !== null) {\n                ctrl[1].register(ctrl[0]);\n                ctrl[0].group = ctrl[1];\n                scope.$on('destroy', () => {\n                    ctrl[1].unregister(ctrl[0]);\n                });\n            }\n        },\n        controller: BsCollapseDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {bsCollapseDirective} from './bs-collapse.directive';\nimport {bsCollapseGroupDirective} from './bs-collapse-group.directive';\n\nconst collapseModule = angular.module('angularBS.collapse', [])\n    .directive('bsCollapse', bsCollapseDirective)\n    .directive('bsCollapseGroup', bsCollapseGroupDirective);\n\nexport const angularBSCollapse = collapseModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { bsCollapseDirective } from './bs-collapse.directive';\nimport { bsCollapseGroupDirective } from './bs-collapse-group.directive';\nconst collapseModule = angular.module('angularBS.collapse', [])\n    .directive('bsCollapse', bsCollapseDirective)\n    .directive('bsCollapseGroup', bsCollapseGroupDirective);\nexport const angularBSCollapse = collapseModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nexport class BsDropdownBoundaryDirectiveController {\n    public $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsDropdownBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsDropdownBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nexport class BsDropdownBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsDropdownBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsDropdownBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\n\nexport function bsDropdownToggleDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsDropdown',\n        link: function(scope, element, attrs, dropdownCtrl) {\n            element.on('click', () => {\n                scope.$apply(() => {\n                    dropdownCtrl.bsDropdown = !dropdownCtrl.bsDropdown;\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport function bsDropdownToggleDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsDropdown',\n        link: function (scope, element, attrs, dropdownCtrl) {\n            element.on('click', () => {\n                scope.$apply(() => {\n                    dropdownCtrl.bsDropdown = !dropdownCtrl.bsDropdown;\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective, IDocumentService, IScope} from 'angular';\nimport {AngularBSService} from '../helpers/angularBS.service';\nimport {BsDropdownBoundaryDirectiveController} from './bs-dropdown-boundary.directive';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BSDropdownDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $document: IDocumentService;\n    private angularBS: AngularBSService;\n    private bsDropdown: boolean;\n    private _bsDropdown: boolean;\n    private boundary: BsDropdownBoundaryDirectiveController;\n    private boundaryElement: JQLite;\n\n    constructor($scope: IScope, $element: JQLite, $document: IDocumentService, angularBS: AngularBSService) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$document = $document;\n        this.angularBS = angularBS;\n    }\n\n    $onInit(): void {\n        this.bsDropdown = !!this.bsDropdown;\n        this.$element.addClass('dropdown');\n        this.$document.on('click', this._onClick.bind(this));\n        this.$element.on('keydown', this._keydown.bind(this));\n    }\n\n    $doCheck(): void {\n        if (this._bsDropdown !== this.bsDropdown) {\n            this._bsDropdown = this.bsDropdown;\n            if (this.bsDropdown) {\n                this.$element.addClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).addClass('show');\n                if (this.boundary || this.boundaryElement) {\n                    this.reposition();\n                }\n            } else {\n                if (this.boundary || this.boundaryElement) {\n                    this.$element.removeClass('dropup');\n                }\n                this.$element.removeClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).removeClass('show');\n            }\n        }\n    }\n\n    $onDestroy(): void {\n        this.$document.off('click', this._onClick.bind(this));\n        this.$element.off('keydown', this._keydown.bind(this));\n    }\n\n    _onClick(e: JQueryMouseEventObject): void {\n        if (this.bsDropdown && !this.$element[0].contains(e.target)) {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n        }\n    }\n\n    _keydown(e: JQueryKeyEventObject): void {\n        if (this.bsDropdown && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n            return;\n        }\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            const items = this.$element[0].querySelectorAll<HTMLAnchorElement>(\n                '.dropdown-menu a:not(.disabled)'\n            );\n            let idx = -1;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].contains(e.target)) {\n                    idx = i;\n                    break;\n                }\n            }\n            if (e.key === 'ArrowUp' && idx > 0) {\n                idx--;\n            } else if (e.key === 'ArrowDown' && idx < items.length - 1) {\n                idx++;\n            }\n            if (!~idx) {\n                idx = 0;\n            }\n            items[idx].focus();\n        }\n    }\n\n    reposition(): void {\n        const boundaryElement = this.boundary ? this.boundary.$element[0] : this.boundaryElement[0],\n            boundaryOffset = this.angularBS.offset(boundaryElement),\n            menuOffset = this.angularBS.offset(this.$element[0].querySelector('.dropdown-menu'));\n        if (menuOffset.height + menuOffset.top > boundaryOffset.height + boundaryOffset.top) {\n            this.$element.addClass('dropup');\n        } else {\n            this.$element.removeClass('dropup');\n        }\n    }\n}\n\nexport function bsDropdownDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsDropdown\n     * @property {expression|boolean} bsDropdown\n     */\n    return {\n        restrict: 'A',\n        require: {\n            boundary: '?^bsDropdownBoundary'\n        },\n        bindToController: {\n            bsDropdown: '=?',\n            boundaryElement: '<?'\n        },\n        controller: BSDropdownDirectiveController\n    };\n}\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BSDropdownDirectiveController {\n    constructor($scope, $element, $document, angularBS) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$document = $document;\n        this.angularBS = angularBS;\n    }\n    $onInit() {\n        this.bsDropdown = !!this.bsDropdown;\n        this.$element.addClass('dropdown');\n        this.$document.on('click', this._onClick.bind(this));\n        this.$element.on('keydown', this._keydown.bind(this));\n    }\n    $doCheck() {\n        if (this._bsDropdown !== this.bsDropdown) {\n            this._bsDropdown = this.bsDropdown;\n            if (this.bsDropdown) {\n                this.$element.addClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).addClass('show');\n                if (this.boundary || this.boundaryElement) {\n                    this.reposition();\n                }\n            }\n            else {\n                if (this.boundary || this.boundaryElement) {\n                    this.$element.removeClass('dropup');\n                }\n                this.$element.removeClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).removeClass('show');\n            }\n        }\n    }\n    $onDestroy() {\n        this.$document.off('click', this._onClick.bind(this));\n        this.$element.off('keydown', this._keydown.bind(this));\n    }\n    _onClick(e) {\n        if (this.bsDropdown && !this.$element[0].contains(e.target)) {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n        }\n    }\n    _keydown(e) {\n        if (this.bsDropdown && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n            return;\n        }\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            const items = this.$element[0].querySelectorAll('.dropdown-menu a:not(.disabled)');\n            let idx = -1;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].contains(e.target)) {\n                    idx = i;\n                    break;\n                }\n            }\n            if (e.key === 'ArrowUp' && idx > 0) {\n                idx--;\n            }\n            else if (e.key === 'ArrowDown' && idx < items.length - 1) {\n                idx++;\n            }\n            if (!~idx) {\n                idx = 0;\n            }\n            items[idx].focus();\n        }\n    }\n    reposition() {\n        const boundaryElement = this.boundary ? this.boundary.$element[0] : this.boundaryElement[0], boundaryOffset = this.angularBS.offset(boundaryElement), menuOffset = this.angularBS.offset(this.$element[0].querySelector('.dropdown-menu'));\n        if (menuOffset.height + menuOffset.top > boundaryOffset.height + boundaryOffset.top) {\n            this.$element.addClass('dropup');\n        }\n        else {\n            this.$element.removeClass('dropup');\n        }\n    }\n}\nexport function bsDropdownDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsDropdown\n     * @property {expression|boolean} bsDropdown\n     */\n    return {\n        restrict: 'A',\n        require: {\n            boundary: '?^bsDropdownBoundary'\n        },\n        bindToController: {\n            bsDropdown: '=?',\n            boundaryElement: '<?'\n        },\n        controller: BSDropdownDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {helpers} from '../helpers/helpers.module';\nimport {bsDropdownBoundaryDirective} from './bs-dropdown-boundary.directive';\nimport {bsDropdownDirective} from './bs-dropdown.directive';\nimport {bsDropdownToggleDirective} from './bs-dropdown-toggle.directive';\n\nconst dropdownModule = angular.module('angularBS.dropdown', [helpers])\n    .directive('bsDropdownBoundary', bsDropdownBoundaryDirective)\n    .directive('bsDropdown', bsDropdownDirective)\n    .directive('bsDropdownToggle', bsDropdownToggleDirective);\n\nexport const angularBSDropdown = dropdownModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { helpers } from '../helpers/helpers.module';\nimport { bsDropdownBoundaryDirective } from './bs-dropdown-boundary.directive';\nimport { bsDropdownDirective } from './bs-dropdown.directive';\nimport { bsDropdownToggleDirective } from './bs-dropdown-toggle.directive';\nconst dropdownModule = angular.module('angularBS.dropdown', [helpers])\n    .directive('bsDropdownBoundary', bsDropdownBoundaryDirective)\n    .directive('bsDropdown', bsDropdownDirective)\n    .directive('bsDropdownToggle', bsDropdownToggleDirective);\nexport const angularBSDropdown = dropdownModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport * as angular from 'angular';\n\nexport interface IElementOffset {\n    width: number,\n    height: number,\n    top: number,\n    left: number\n}\n\nexport type placement = 'top' | 'left' | 'right' | 'bottom' | string;\n\nexport class AngularBSService {\n    /**\n     * Get element width, height, position from top and left of document/window,\n     */\n    offset(element: HTMLElement): IElementOffset {\n        const elemBCR = element.getBoundingClientRect(),\n            elemStyle = element['currentStyle'] || window.getComputedStyle(element);\n        return {\n            width: Math.ceil(angular.isNumber(elemBCR.width) ? elemBCR.width : element.offsetWidth)\n                + parseInt(elemStyle.getPropertyValue('margin-left'))\n                + parseInt(elemStyle.getPropertyValue('margin-right')),\n            height: Math.ceil(angular.isNumber(elemBCR.height) ? elemBCR.height : element.offsetHeight)\n                + parseInt(elemStyle.getPropertyValue('margin-top'))\n                + parseInt(elemStyle.getPropertyValue('margin-bottom')),\n            top: Math.ceil(elemBCR.top + (window.pageYOffset || document.documentElement.scrollTop)),\n            left: Math.ceil(elemBCR.left + (window.pageXOffset || document.documentElement.scrollLeft)),\n        };\n    }\n\n    /**\n     * Removes all placement classes on given element\n     */\n    setPlacementCSS(element: JQLite, prefix: string, placement: placement): void {\n        const placements = ['top', 'left', 'right', 'bottom'];\n        for (let p = 0; p < placements.length; p++) {\n            element.removeClass(prefix + placements[p]);\n        }\n        element.addClass(prefix + placement);\n    }\n\n    /**\n     * Position element aside of positionTo on given side (placement)\n     * @param element\n     * @param positionTo\n     * @param placement\n     * @param [boundaryElement] - defaults to document|window\n     * @param cssPrefix\n     * @returns {{top: number, left: number, position: string}}\n     */\n    positionElement(\n        element: JQLite,\n        positionTo: JQLite,\n        placement: placement,\n        boundaryElement?: JQLite,\n        cssPrefix?: string\n    ): void {\n        const splitPlacement = placement.split(' ');\n        let top = 0, left = 0,\n            arrowTop = '50%',\n            realPlacement: placement = 'left',\n            offset = this.offset(element[0]);\n        const offsetTo = this.offset(positionTo[0]),\n            placements: placement[] = ['right', 'top', 'bottom'],\n            auto = !!~splitPlacement.indexOf('auto'),\n            calcPosition = () => {\n                switch (realPlacement) {\n                    case 'bottom':\n                        top = (offsetTo.top + offsetTo.height);\n                        left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                        break;\n                    case 'top':\n                        top = (offsetTo.top - offset.height);\n                        left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                        break;\n                    case 'left':\n                        top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                        left = (offsetTo.left - offset.width);\n                        break;\n                    case 'right':\n                        top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                        left = (offsetTo.left + offsetTo.width);\n                        break;\n                }\n                this.setPlacementCSS(element, cssPrefix, realPlacement);\n                // check to see if element has been resized after adding the placement\n                const newOffset = this.offset(element[0]);\n                if (newOffset.height !== offset.height || newOffset.width !== offset.width) {\n                    offset = newOffset;\n                    calcPosition();\n                }\n            };\n        for (let p = 0; p < placements.length; p++) {\n            if (~splitPlacement.indexOf(placements[p])) {\n                realPlacement = placements[p];\n                break;\n            }\n        }\n        calcPosition();\n        // get boundary offset\n        const bo = angular.isDefined(boundaryElement) ? this.offset(boundaryElement[0]) : {\n            top: window.pageYOffset || document.documentElement.scrollTop,\n            left: 0,\n            width: Math.max(window.innerWidth, document.body.clientWidth),\n            height: Math.max(window.innerHeight, document.body.clientHeight)\n        };\n        // change side if element would be outside of given viewport\n        if (auto) {\n            let newPlacement = realPlacement;\n            switch (realPlacement) {\n                case 'left':\n                    if (left < bo.left) {\n                        newPlacement = 'right';\n                    }\n                    break;\n                case 'right':\n                    if (left + offset.width + 10 > bo.left + bo.width) {\n                        newPlacement = 'left';\n                    }\n                    break;\n                case 'bottom':\n                    if (top + offset.height + 10 > bo.top + bo.height) {\n                        newPlacement = 'top';\n                    }\n                    break;\n                case 'top':\n                    if (top < bo.top) {\n                        newPlacement = 'bottom';\n                    }\n                    break;\n            }\n            if (newPlacement !== realPlacement) {\n                realPlacement = newPlacement;\n                calcPosition();\n            }\n        }\n        // adjust arrow position\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (realPlacement) {\n                case 'left':\n                case 'right':\n                    if (top < bo.top) {\n                        top = bo.top;\n                        arrowTop = (offsetTo.top + offsetTo.height / 2) + 'px';\n                    } else if (top + offset.height > bo.top + bo.height) {\n                        top = bo.top + bo.height - offset.height;\n                        let arrowTopN = offsetTo.top + offsetTo.height / 2 - top;\n                        if (arrowTopN > offset.height - 15) {\n                            arrowTopN = offset.height - 15;\n                        }\n                        arrowTop = arrowTopN + 'px';\n                    }\n                    arrow.css('top', arrowTop);\n                    break;\n                case 'bottom':\n                    arrow.css('top', '');\n                    break;\n                case 'top':\n                    arrow.css('top', 'auto');\n                    break;\n            }\n        }\n        this.adjustArrow(element, realPlacement);\n        // apply element position\n        element.css({\n            top: '0px',\n            left: '0px',\n            transform: 'translate3d(' + left + 'px, ' + top + 'px, 0px)'\n        });\n    }\n\n    /**\n     * Properly set arrow position of tooltip/popover element\n     */\n    adjustArrow(element: JQLite, placement: placement): void {\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (placement) {\n                case 'top':\n                case 'bottom':\n                    arrow.css('left', 'calc(50% - ' + (this.offset(arrow[0]).width / 2 + 'px)'));\n                    break;\n                case 'left':\n                case 'right':\n                    arrow.css('top', 'calc(50% - ' + (this.offset(arrow[0]).height / 2 + 'px)'));\n                    break;\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nexport class AngularBSService {\n    /**\n     * Get element width, height, position from top and left of document/window,\n     */\n    offset(element) {\n        const elemBCR = element.getBoundingClientRect(), elemStyle = element['currentStyle'] || window.getComputedStyle(element);\n        return {\n            width: Math.ceil(angular.isNumber(elemBCR.width) ? elemBCR.width : element.offsetWidth)\n                + parseInt(elemStyle.getPropertyValue('margin-left'))\n                + parseInt(elemStyle.getPropertyValue('margin-right')),\n            height: Math.ceil(angular.isNumber(elemBCR.height) ? elemBCR.height : element.offsetHeight)\n                + parseInt(elemStyle.getPropertyValue('margin-top'))\n                + parseInt(elemStyle.getPropertyValue('margin-bottom')),\n            top: Math.ceil(elemBCR.top + (window.pageYOffset || document.documentElement.scrollTop)),\n            left: Math.ceil(elemBCR.left + (window.pageXOffset || document.documentElement.scrollLeft)),\n        };\n    }\n    /**\n     * Removes all placement classes on given element\n     */\n    setPlacementCSS(element, prefix, placement) {\n        const placements = ['top', 'left', 'right', 'bottom'];\n        for (let p = 0; p < placements.length; p++) {\n            element.removeClass(prefix + placements[p]);\n        }\n        element.addClass(prefix + placement);\n    }\n    /**\n     * Position element aside of positionTo on given side (placement)\n     * @param element\n     * @param positionTo\n     * @param placement\n     * @param [boundaryElement] - defaults to document|window\n     * @param cssPrefix\n     * @returns {{top: number, left: number, position: string}}\n     */\n    positionElement(element, positionTo, placement, boundaryElement, cssPrefix) {\n        const splitPlacement = placement.split(' ');\n        let top = 0, left = 0, arrowTop = '50%', realPlacement = 'left', offset = this.offset(element[0]);\n        const offsetTo = this.offset(positionTo[0]), placements = ['right', 'top', 'bottom'], auto = !!~splitPlacement.indexOf('auto'), calcPosition = () => {\n            switch (realPlacement) {\n                case 'bottom':\n                    top = (offsetTo.top + offsetTo.height);\n                    left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                    break;\n                case 'top':\n                    top = (offsetTo.top - offset.height);\n                    left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                    break;\n                case 'left':\n                    top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                    left = (offsetTo.left - offset.width);\n                    break;\n                case 'right':\n                    top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                    left = (offsetTo.left + offsetTo.width);\n                    break;\n            }\n            this.setPlacementCSS(element, cssPrefix, realPlacement);\n            // check to see if element has been resized after adding the placement\n            const newOffset = this.offset(element[0]);\n            if (newOffset.height !== offset.height || newOffset.width !== offset.width) {\n                offset = newOffset;\n                calcPosition();\n            }\n        };\n        for (let p = 0; p < placements.length; p++) {\n            if (~splitPlacement.indexOf(placements[p])) {\n                realPlacement = placements[p];\n                break;\n            }\n        }\n        calcPosition();\n        // get boundary offset\n        const bo = angular.isDefined(boundaryElement) ? this.offset(boundaryElement[0]) : {\n            top: window.pageYOffset || document.documentElement.scrollTop,\n            left: 0,\n            width: Math.max(window.innerWidth, document.body.clientWidth),\n            height: Math.max(window.innerHeight, document.body.clientHeight)\n        };\n        // change side if element would be outside of given viewport\n        if (auto) {\n            let newPlacement = realPlacement;\n            switch (realPlacement) {\n                case 'left':\n                    if (left < bo.left) {\n                        newPlacement = 'right';\n                    }\n                    break;\n                case 'right':\n                    if (left + offset.width + 10 > bo.left + bo.width) {\n                        newPlacement = 'left';\n                    }\n                    break;\n                case 'bottom':\n                    if (top + offset.height + 10 > bo.top + bo.height) {\n                        newPlacement = 'top';\n                    }\n                    break;\n                case 'top':\n                    if (top < bo.top) {\n                        newPlacement = 'bottom';\n                    }\n                    break;\n            }\n            if (newPlacement !== realPlacement) {\n                realPlacement = newPlacement;\n                calcPosition();\n            }\n        }\n        // adjust arrow position\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (realPlacement) {\n                case 'left':\n                case 'right':\n                    if (top < bo.top) {\n                        top = bo.top;\n                        arrowTop = (offsetTo.top + offsetTo.height / 2) + 'px';\n                    }\n                    else if (top + offset.height > bo.top + bo.height) {\n                        top = bo.top + bo.height - offset.height;\n                        let arrowTopN = offsetTo.top + offsetTo.height / 2 - top;\n                        if (arrowTopN > offset.height - 15) {\n                            arrowTopN = offset.height - 15;\n                        }\n                        arrowTop = arrowTopN + 'px';\n                    }\n                    arrow.css('top', arrowTop);\n                    break;\n                case 'bottom':\n                    arrow.css('top', '');\n                    break;\n                case 'top':\n                    arrow.css('top', 'auto');\n                    break;\n            }\n        }\n        this.adjustArrow(element, realPlacement);\n        // apply element position\n        element.css({\n            top: '0px',\n            left: '0px',\n            transform: 'translate3d(' + left + 'px, ' + top + 'px, 0px)'\n        });\n    }\n    /**\n     * Properly set arrow position of tooltip/popover element\n     */\n    adjustArrow(element, placement) {\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (placement) {\n                case 'top':\n                case 'bottom':\n                    arrow.css('left', 'calc(50% - ' + (this.offset(arrow[0]).width / 2 + 'px)'));\n                    break;\n                case 'left':\n                case 'right':\n                    arrow.css('top', 'calc(50% - ' + (this.offset(arrow[0]).height / 2 + 'px)'));\n                    break;\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {AngularBSService} from './angularBS.service';\n\nconst helpersModule = angular.module('angularBS.helpers', [])\n    .factory('angularBS', AngularBSService);\n\nexport const helpers = helpersModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { AngularBSService } from './angularBS.service';\nconst helpersModule = angular.module('angularBS.helpers', [])\n    .factory('angularBS', AngularBSService);\nexport const helpers = helpersModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IComponentOptions, IPromise, IQService, ITimeoutService} from 'angular';\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\n\nexport class BSModalBackdropController {\n    private $element: JQLite;\n    private $q: IQService;\n    private readonly $timeout: ITimeoutService;\n    private ModalBackdrop: ModalBackdropFactory;\n    private isAnimated: () => boolean;\n    /**\n     * @ngInject\n     */\n    constructor($element: JQLite, $q: IQService, $timeout: ITimeoutService, ModalBackdrop: ModalBackdropFactory) {\n        this.$element = $element;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n\n    $onInit(): void {\n        this.ModalBackdrop.backdropController = this;\n        this.isAnimated = this.ModalBackdrop.isAnimated.bind(this.ModalBackdrop);\n    }\n\n    $postLink(): void {\n        // wait until 'fade' class is added, we don't use $timeout cause we don't need a digest cycle here\n        setTimeout(() => {\n            this.$element.children()[0].offsetWidth; // force reflow\n            this.$element.children().addClass('show');\n            this.ModalBackdrop.shown();\n        });\n    }\n\n    hide(): IPromise<void> {\n        const defered = this.$q.defer<void>(),\n            backdropElement = this.$element.children();\n        backdropElement.removeClass('show');\n        if (this.isAnimated()) {\n            let transitionFinished = false;\n            const transition = function() {\n                if (!transitionFinished) {\n                    defered.resolve();\n                    transitionFinished = true;\n                }\n            };\n            backdropElement[0].addEventListener('transitionend', transition);\n            this.$timeout(transition, 150);\n        } else {\n            defered.resolve();\n        }\n        return defered.promise;\n    }\n}\n\nexport const bsModalBackdropComponent: IComponentOptions = {\n    template: '<div class=\"modal-backdrop\" ng-class=\"{\\'fade\\': vm.isAnimated()}\"></div>',\n    controllerAs: 'vm',\n    controller: BSModalBackdropController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class BSModalBackdropController {\n    /**\n     * @ngInject\n     */\n    constructor($element, $q, $timeout, ModalBackdrop) {\n        this.$element = $element;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n    $onInit() {\n        this.ModalBackdrop.backdropController = this;\n        this.isAnimated = this.ModalBackdrop.isAnimated.bind(this.ModalBackdrop);\n    }\n    $postLink() {\n        // wait until 'fade' class is added, we don't use $timeout cause we don't need a digest cycle here\n        setTimeout(() => {\n            this.$element.children()[0].offsetWidth; // force reflow\n            this.$element.children().addClass('show');\n            this.ModalBackdrop.shown();\n        });\n    }\n    hide() {\n        const defered = this.$q.defer(), backdropElement = this.$element.children();\n        backdropElement.removeClass('show');\n        if (this.isAnimated()) {\n            let transitionFinished = false;\n            const transition = function () {\n                if (!transitionFinished) {\n                    defered.resolve();\n                    transitionFinished = true;\n                }\n            };\n            backdropElement[0].addEventListener('transitionend', transition);\n            this.$timeout(transition, 150);\n        }\n        else {\n            defered.resolve();\n        }\n        return defered.promise;\n    }\n}\nexport const bsModalBackdropComponent = {\n    template: '<div class=\"modal-backdrop\" ng-class=\"{\\'fade\\': vm.isAnimated()}\"></div>',\n    controllerAs: 'vm',\n    controller: BSModalBackdropController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IDirective, IDocumentService, IScope, ITimeoutService} from 'angular';\nimport IInjectorService = angular.auto.IInjectorService;\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\nimport {ModalProvider} from './modal.provider';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport class BSModalController {\n    private readonly $timeout: ITimeoutService;\n    private $document: IDocumentService;\n    private $injector: IInjectorService;\n    private Modal: ModalProvider;\n    private ModalBackdrop: ModalBackdropFactory;\n    private _keydownHandler: (JQueryEventObject) => void;\n    private _bsModal: boolean;\n    private onBeforeChange: () => boolean;\n    public $scope: IScope;\n    public $element: JQLite;\n    public backdrop: 'static' | boolean;\n    public keyboard: boolean;\n    public bsModal: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $timeout: ITimeoutService,\n        $document: IDocumentService,\n        $injector: IInjectorService,\n        Modal: ModalProvider,\n        ModalBackdrop: ModalBackdropFactory\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$injector = $injector;\n        this.Modal = Modal;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n\n\n    $onInit(): void {\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Modal.config.keyboard;\n        }\n        if (angular.isUndefined(this.backdrop)) {\n            this.backdrop = this.Modal.config.backdrop;\n        }\n        // backdrop click\n        this.$element.on('click', (e) => {\n            if (window.getSelection().type === 'Range') {\n                return;\n            }\n            if (this.backdrop === true && e.target === this.$element[0]) { // .modal covers whole page\n                this.$scope.$apply(() => {\n                    this.hide();\n                });\n            }\n        });\n        // keyboard esc\n        this._keydownHandler = (e) => this._onKeydown(e);\n        this.$document.on('keydown', this._keydownHandler);\n    }\n\n    $doCheck(): void {\n        if (this._bsModal !== this.bsModal) {\n            this._bsModal = this.bsModal;\n            if (this.bsModal) {\n                this._doShow();\n            } else {\n                this._doHide();\n            }\n        }\n    }\n\n    $onDestroy(): void {\n        if (this.bsModal) {\n            this._doHide();\n        }\n        this.$document.off('keydown', this._keydownHandler);\n    }\n\n    _onKeydown(e: JQueryKeyEventObject): void {\n        if (this.keyboard && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.hide();\n            });\n        }\n    }\n\n    _doShow(): void {\n        if (!this.$element.hasClass('show')) {\n            this.$element.css({display: 'block'});\n            this.$element[0].offsetWidth; // force reflow\n            this.ModalBackdrop\n                .show(!!this.backdrop, this.$element.hasClass('fade'))\n                .then(() => {\n                    this.$element.addClass('show');\n                });\n        }\n    }\n\n    _doHide(): void {\n        if (this.$element.hasClass('show')) {\n            this.$element.removeClass('show');\n            let transitionEnded = false;\n            const callback = () => {\n                    this.ModalBackdrop.hide();\n                    this.$element.css({display: ''});\n                },\n                transition = () => {\n                    if (!transitionEnded) {\n                        this.$element[0].removeEventListener('transitionend', transition);\n                        callback();\n                        transitionEnded = true;\n                    }\n                };\n            if (this.$element.hasClass('fade')) {\n                this.$element[0].addEventListener('transitionend', transition);\n                this.$timeout(transition, 300);\n            } else {\n                callback();\n            }\n        }\n    }\n\n    _shouldChange(): boolean {\n        let ret = this.onBeforeChange();\n        if (ret !== false) {\n            ret = this.$injector.invoke(this.Modal.config.onBeforeChange, this);\n        }\n        return ret !== false;\n    }\n\n    show(): void {\n        if (this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = true;\n            this._doShow();\n        }\n    }\n\n    hide(): void {\n        if (!this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = false;\n            this._doHide();\n        }\n    }\n}\n\nexport function bsModalDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsModal\n     *\n     * @param {expression} bsModal\n     * @param {string|boolean} backdrop\n     * @param {boolean} keyboard\n     * @param {Function} onBeforeChange\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            bsModal: '=',\n            keyboard: '<?',\n            backdrop: '<?',\n            onBeforeChange: '&'\n        },\n        controller: BSModalController,\n        controllerAs: 'bsModal'\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class BSModalController {\n    constructor($scope, $element, $timeout, $document, $injector, Modal, ModalBackdrop) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$injector = $injector;\n        this.Modal = Modal;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n    $onInit() {\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Modal.config.keyboard;\n        }\n        if (angular.isUndefined(this.backdrop)) {\n            this.backdrop = this.Modal.config.backdrop;\n        }\n        // backdrop click\n        this.$element.on('click', (e) => {\n            if (window.getSelection().type === 'Range') {\n                return;\n            }\n            if (this.backdrop === true && e.target === this.$element[0]) { // .modal covers whole page\n                this.$scope.$apply(() => {\n                    this.hide();\n                });\n            }\n        });\n        // keyboard esc\n        this._keydownHandler = (e) => this._onKeydown(e);\n        this.$document.on('keydown', this._keydownHandler);\n    }\n    $doCheck() {\n        if (this._bsModal !== this.bsModal) {\n            this._bsModal = this.bsModal;\n            if (this.bsModal) {\n                this._doShow();\n            }\n            else {\n                this._doHide();\n            }\n        }\n    }\n    $onDestroy() {\n        if (this.bsModal) {\n            this._doHide();\n        }\n        this.$document.off('keydown', this._keydownHandler);\n    }\n    _onKeydown(e) {\n        if (this.keyboard && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.hide();\n            });\n        }\n    }\n    _doShow() {\n        if (!this.$element.hasClass('show')) {\n            this.$element.css({ display: 'block' });\n            this.$element[0].offsetWidth; // force reflow\n            this.ModalBackdrop\n                .show(!!this.backdrop, this.$element.hasClass('fade'))\n                .then(() => {\n                this.$element.addClass('show');\n            });\n        }\n    }\n    _doHide() {\n        if (this.$element.hasClass('show')) {\n            this.$element.removeClass('show');\n            let transitionEnded = false;\n            const callback = () => {\n                this.ModalBackdrop.hide();\n                this.$element.css({ display: '' });\n            }, transition = () => {\n                if (!transitionEnded) {\n                    this.$element[0].removeEventListener('transitionend', transition);\n                    callback();\n                    transitionEnded = true;\n                }\n            };\n            if (this.$element.hasClass('fade')) {\n                this.$element[0].addEventListener('transitionend', transition);\n                this.$timeout(transition, 300);\n            }\n            else {\n                callback();\n            }\n        }\n    }\n    _shouldChange() {\n        let ret = this.onBeforeChange();\n        if (ret !== false) {\n            ret = this.$injector.invoke(this.Modal.config.onBeforeChange, this);\n        }\n        return ret !== false;\n    }\n    show() {\n        if (this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = true;\n            this._doShow();\n        }\n    }\n    hide() {\n        if (!this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = false;\n            this._doHide();\n        }\n    }\n}\nexport function bsModalDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsModal\n     *\n     * @param {expression} bsModal\n     * @param {string|boolean} backdrop\n     * @param {boolean} keyboard\n     * @param {Function} onBeforeChange\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            bsModal: '=',\n            keyboard: '<?',\n            backdrop: '<?',\n            onBeforeChange: '&'\n        },\n        controller: BSModalController,\n        controllerAs: 'bsModal'\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IDirective} from 'angular';\n\nexport function dismissDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsModal',\n        link: function(scope, element, attrs, bsModal) {\n            element.on('click', function() {\n                scope.$apply(() => {\n                    bsModal.hide();\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport function dismissDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsModal',\n        link: function (scope, element, attrs, bsModal) {\n            element.on('click', function () {\n                scope.$apply(() => {\n                    bsModal.hide();\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompileService, IDeferred, IDocumentService, IPromise, IQService, IRootScopeService, IScope} from 'angular';\nimport * as angular from 'angular';\nimport {BSModalBackdropController} from './bs-modal-backdrop.component';\n\ninterface IBackdropScope extends IScope {\n    isVisible: () => boolean\n}\n\n/**\n * @ngInject\n */\nexport class ModalBackdropFactory {\n    private $q: IQService;\n    private _isVisible = false;\n    private _isAnimated = false;\n    private _backDropPromise: IDeferred<void>;\n    private _openModals = 0;\n    private _bodyElement: JQLite;\n    public backdropController: BSModalBackdropController;\n\n    constructor($document: IDocumentService, $compile: ICompileService, $rootScope: IRootScopeService, $q: IQService) {\n        this.$q = $q;\n\n        this._bodyElement = $document.find('body');\n        const backdropElement = angular.element('<bs-modal-backdrop ng-if=\"isVisible()\"></bs-modal-backdrop>'),\n            backdropScope = $rootScope.$new(true) as IBackdropScope;\n        // create backdrop element in body\n        backdropScope.isVisible = this.isVisible.bind(this);\n        $compile(backdropElement)(backdropScope);\n        this._bodyElement.append(backdropElement);\n    }\n\n    isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    isAnimated(): boolean {\n        return this._isAnimated;\n    }\n\n    show(backdrop: boolean, animate: boolean): IPromise<void> {\n        this._openModals++;\n        this._backDropPromise = this.$q.defer<void>();\n        this._isAnimated = !!animate;\n        this._bodyElement.addClass('modal-open');\n        if (backdrop && !this._isVisible) {\n            this._isVisible = true;\n        } else {\n            this._backDropPromise.resolve();\n        }\n        return this._backDropPromise.promise;\n    }\n\n    shown(): void {\n        this._backDropPromise.resolve();\n    }\n\n    hide(): void {\n        this._openModals--;\n        if (this._openModals < 0) {\n            this._openModals = 0;\n        }\n        if (this._openModals === 0) {\n            if (angular.isDefined(this.backdropController)) {\n                this.backdropController.hide().then(this._doHide);\n            } else {\n                this._doHide();\n            }\n        }\n    }\n\n    private _doHide = () => {\n        this._isVisible = false;\n        this._bodyElement.removeClass('modal-open');\n    }\n}\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class ModalBackdropFactory {\n    constructor($document, $compile, $rootScope, $q) {\n        this._isVisible = false;\n        this._isAnimated = false;\n        this._openModals = 0;\n        this._doHide = () => {\n            this._isVisible = false;\n            this._bodyElement.removeClass('modal-open');\n        };\n        this.$q = $q;\n        this._bodyElement = $document.find('body');\n        const backdropElement = angular.element('<bs-modal-backdrop ng-if=\"isVisible()\"></bs-modal-backdrop>'), backdropScope = $rootScope.$new(true);\n        // create backdrop element in body\n        backdropScope.isVisible = this.isVisible.bind(this);\n        $compile(backdropElement)(backdropScope);\n        this._bodyElement.append(backdropElement);\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    isAnimated() {\n        return this._isAnimated;\n    }\n    show(backdrop, animate) {\n        this._openModals++;\n        this._backDropPromise = this.$q.defer();\n        this._isAnimated = !!animate;\n        this._bodyElement.addClass('modal-open');\n        if (backdrop && !this._isVisible) {\n            this._isVisible = true;\n        }\n        else {\n            this._backDropPromise.resolve();\n        }\n        return this._backDropPromise.promise;\n    }\n    shown() {\n        this._backDropPromise.resolve();\n    }\n    hide() {\n        this._openModals--;\n        if (this._openModals < 0) {\n            this._openModals = 0;\n        }\n        if (this._openModals === 0) {\n            if (angular.isDefined(this.backdropController)) {\n                this.backdropController.hide().then(this._doHide);\n            }\n            else {\n                this._doHide();\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {ModalProvider} from './modal.provider';\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\nimport {bsModalBackdropComponent} from './bs-modal-backdrop.component';\nimport {bsModalDirective} from './bs-modal.directive';\nimport {dismissDirective} from './dismiss.directive';\n\nconst modalModule = angular.module('angularBS.modal', [])\n    .provider('Modal', ModalProvider)\n    .factory('ModalBackdrop', ModalBackdropFactory)\n    .component('bsModalBackdrop', bsModalBackdropComponent)\n    .directive('bsModal', bsModalDirective)\n    .directive('dismiss', dismissDirective);\n\nexport const angularBSModal = modalModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { ModalProvider } from './modal.provider';\nimport { ModalBackdropFactory } from './modal-backdrop.factory';\nimport { bsModalBackdropComponent } from './bs-modal-backdrop.component';\nimport { bsModalDirective } from './bs-modal.directive';\nimport { dismissDirective } from './dismiss.directive';\nconst modalModule = angular.module('angularBS.modal', [])\n    .provider('Modal', ModalProvider)\n    .factory('ModalBackdrop', ModalBackdropFactory)\n    .component('bsModalBackdrop', bsModalBackdropComponent)\n    .directive('bsModal', bsModalDirective)\n    .directive('dismiss', dismissDirective);\nexport const angularBSModal = modalModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {Injectable} from 'angular';\nimport {BSModalController} from './bs-modal.directive';\n\ninterface IModalOptions {\n    backdrop: 'static' | boolean,\n    keyboard: boolean,\n    transitionDuration: number,\n    backdropTransitionDuration: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onBeforeChange: Injectable<(this: BSModalController, ...args: any[]) => boolean>\n}\n\nexport class ModalProvider {\n    public config: IModalOptions = {\n        backdrop: 'static',\n        keyboard: true,\n        transitionDuration: 300,\n        backdropTransitionDuration: 150,\n        onBeforeChange: () => true\n    }\n\n    public backdropController = null;\n\n    $get(): this {\n        return this;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class ModalProvider {\n    constructor() {\n        this.config = {\n            backdrop: 'static',\n            keyboard: true,\n            transitionDuration: 300,\n            backdropTransitionDuration: 150,\n            onBeforeChange: () => true\n        };\n        this.backdropController = null;\n    }\n    $get() {\n        return this;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nexport class BsPopoverBoundaryDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsPopoverBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsPopoverBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nexport class BsPopoverBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsPopoverBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsPopoverBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {\n    IAttributes,\n    ICompileService,\n    IDirective,\n    IDocumentService,\n    ISCEService,\n    IScope,\n    ITimeoutService\n} from 'angular';\nimport {IPopoverOptions} from './popover.provider';\nimport * as angular from 'angular';\nimport {placement} from '../helpers/angularBS.service';\n\ninterface IBSPopoverElementScope extends IScope {\n    bsPpCtrl: BsPopoverToggleDirectiveController\n}\n\n/**\n * @ngInject\n */\nclass BsPopoverToggleDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $compile: ICompileService;\n    private $timeout: ITimeoutService;\n    private $document: IDocumentService;\n    private $sce: ISCEService;\n    private Popover: IPopoverOptions;\n    private bsPopoverToggle: boolean;\n    private placement: placement;\n    private title: string;\n    private content: string;\n    private readonly documentClick: (JQueryEventObject) => void;\n    private html: string;\n    private popoverElement: JQLite = null;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $compile: ICompileService,\n        $timeout: ITimeoutService,\n        $document: IDocumentService,\n        $sce: ISCEService,\n        Popover: IPopoverOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Popover = Popover;\n\n        this.documentClick = (e: JQueryMouseEventObject) => {\n            if (!$element[0].contains(e.target)) {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            }\n        };\n\n        ['title', 'content'].forEach((attr) => {\n            $attrs.$observe(attr, (value) => {\n                if (!(angular.isDefined(this.html) && this.html) || Popover.html) {\n                    value = (value as string).replace(/[\\u00A0-\\u9999<>&'\"]/gim, function(i) {\n                        return '&#' + i.charCodeAt(0) + ';'\n                    });\n                }\n                this[attr] = $sce.trustAsHtml(value);\n                if (attr === 'title') {\n                    $element.attr('title', '');\n                }\n            });\n        });\n\n        const watcher = this.$scope.$watch(() => {\n            return this.bsPopoverToggle;\n        }, (nV) => {\n            if (nV) {\n                this.bsPopoverToggle = false;\n                this.$compile(\n                    '<bs-popover visible=\"bsPpCtrl.bsPopoverToggle\" animation=\"bsPpCtrl.animation\" '\n                    + 'delay=\"bsPpCtrl.delay\" placement=\"{{bsPpCtrl.placement}}\" '\n                    + 'parent-element=\"bsPpCtrl.$element\" '\n                    + 'boundary=\"bsPpCtrl.boundary\">'\n                    + '<bs-popover-title ng-bind-html=\"bsPpCtrl.title\"></bs-popover-title>'\n                    + '<bs-popover-content ng-bind-html=\"bsPpCtrl.content\"></bs-popover-content>'\n                    + '</bs-popover>'\n                )(this.$scope.$new(), (newElement, newScope: IBSPopoverElementScope) => {\n                    newScope.bsPpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this.popoverElement = newElement;\n                    // we delay popover display a little, to properly calculate its dimensions after its created\n                    $timeout(() => {\n                        this.bsPopoverToggle = true;\n                    }, 50);\n                });\n                watcher(); // create popover element once and leave it be\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.bsPopoverToggle)) {\n            this.bsPopoverToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Popover.trigger : this.$attrs.trigger)\n                .split(' '),\n            open = () => {\n                this.bsPopoverToggle = true;\n                this.$scope.$digest();\n            },\n            close = () => {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('click', open);\n            this.$document.on('click', this.documentClick);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsPopoverToggle = !this.bsPopoverToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Popover.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Popover.title);\n        this.content = this.$sce.trustAsHtml(this.Popover.content);\n    }\n\n    $onDestroy(): void {\n        if (this.popoverElement !== null) {\n            this.popoverElement.remove();\n        }\n        this.$document.off('click', this.documentClick);\n    }\n}\n\nexport function bsPopoverToggleDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsPopoverToggle\n     *\n     * @param {expression|boolean} bsPopoverToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsPopoverToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsPopoverBoundary', 'bsPopoverToggle'],\n        controllerAs: 'bsPpCtrl',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsPopoverToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsPopoverToggleDirectiveController {\n    constructor($scope, $element, $attrs, $compile, $timeout, $document, $sce, Popover) {\n        this.popoverElement = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Popover = Popover;\n        this.documentClick = (e) => {\n            if (!$element[0].contains(e.target)) {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            }\n        };\n        ['title', 'content'].forEach((attr) => {\n            $attrs.$observe(attr, (value) => {\n                if (!(angular.isDefined(this.html) && this.html) || Popover.html) {\n                    value = value.replace(/[\\u00A0-\\u9999<>&'\"]/gim, function (i) {\n                        return '&#' + i.charCodeAt(0) + ';';\n                    });\n                }\n                this[attr] = $sce.trustAsHtml(value);\n                if (attr === 'title') {\n                    $element.attr('title', '');\n                }\n            });\n        });\n        const watcher = this.$scope.$watch(() => {\n            return this.bsPopoverToggle;\n        }, (nV) => {\n            if (nV) {\n                this.bsPopoverToggle = false;\n                this.$compile('<bs-popover visible=\"bsPpCtrl.bsPopoverToggle\" animation=\"bsPpCtrl.animation\" '\n                    + 'delay=\"bsPpCtrl.delay\" placement=\"{{bsPpCtrl.placement}}\" '\n                    + 'parent-element=\"bsPpCtrl.$element\" '\n                    + 'boundary=\"bsPpCtrl.boundary\">'\n                    + '<bs-popover-title ng-bind-html=\"bsPpCtrl.title\"></bs-popover-title>'\n                    + '<bs-popover-content ng-bind-html=\"bsPpCtrl.content\"></bs-popover-content>'\n                    + '</bs-popover>')(this.$scope.$new(), (newElement, newScope) => {\n                    newScope.bsPpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this.popoverElement = newElement;\n                    // we delay popover display a little, to properly calculate its dimensions after its created\n                    $timeout(() => {\n                        this.bsPopoverToggle = true;\n                    }, 50);\n                });\n                watcher(); // create popover element once and leave it be\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.bsPopoverToggle)) {\n            this.bsPopoverToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Popover.trigger : this.$attrs.trigger)\n            .split(' '), open = () => {\n            this.bsPopoverToggle = true;\n            this.$scope.$digest();\n        }, close = () => {\n            this.bsPopoverToggle = false;\n            this.$scope.$digest();\n        };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('click', open);\n            this.$document.on('click', this.documentClick);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsPopoverToggle = !this.bsPopoverToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Popover.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Popover.title);\n        this.content = this.$sce.trustAsHtml(this.Popover.content);\n    }\n    $onDestroy() {\n        if (this.popoverElement !== null) {\n            this.popoverElement.remove();\n        }\n        this.$document.off('click', this.documentClick);\n    }\n}\nexport function bsPopoverToggleDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsPopoverToggle\n     *\n     * @param {expression|boolean} bsPopoverToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsPopoverToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsPopoverBoundary', 'bsPopoverToggle'],\n        controllerAs: 'bsPpCtrl',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsPopoverToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {\n    IAttributes,\n    IComponentOptions,\n    IOnChangesObject,\n    IPromise,\n    IScope,\n    ITimeoutService\n} from 'angular';\nimport {IPopoverOptions, popoverDelay} from './popover.provider';\nimport {AngularBSService, placement} from '../helpers/angularBS.service';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsPopoverComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $timeout: ITimeoutService;\n    private Popover: IPopoverOptions;\n    private angularBS: AngularBSService;\n    private titleVisible: boolean;\n    private contentVisible: boolean;\n    private animation: boolean;\n    private delay: popoverDelay;\n    private placement: placement;\n    private defaultTitle: string;\n    private defaultContent: string;\n    private _delay: popoverDelay;\n    private visible: boolean;\n    private timeout: null | IPromise<void>;\n    private parentElement: JQLite;\n    private boundary: JQLite;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $timeout: ITimeoutService,\n        Popover: IPopoverOptions,\n        angularBS: AngularBSService\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Popover = Popover;\n        this.angularBS = angularBS;\n\n        //\n        $attrs.$observe('placement', (value) => {\n            this.placement = value as string;\n        });\n        // check if title & content are not empty\n        const title = angular.element($element[0].querySelector('.popover-header')),\n            content = angular.element($element[0].querySelector('.popover-body'));\n\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n\n        $scope.$watch(() => {\n            return content.text().trim();\n        }, (nV) => {\n            this.contentVisible = nV !== '';\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Popover.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Popover.delay;\n        }\n        this.placement = this.Popover.placement;\n        this.defaultTitle = this.Popover.title;\n        this.defaultContent = this.Popover.content;\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Popover.delay;\n        }\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay: number;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Popover.delay;\n            } else {\n                delay = this._delay;\n            }\n            if (this.timeout !== null) {\n                this.$timeout.cancel(this.timeout);\n            }\n            this.timeout = this.$timeout(() => {\n                this.timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(\n                            this.$element.children(), this.parentElement, this.placement,\n                            this.boundary !== null ? this.boundary : undefined,\n                            'bs-popover-'\n                        );\n                    } else { // static popover\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-popover-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                } else if (this.animation && !changes.visible.isFirstChange()) {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                } else {\n                    this.fadeIn = false;\n                }\n            }, delay);\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsPopoverTitle\n * @description contents of this element would be transcluded to .popover-title element\n */\n/**\n * @ngdoc component\n * @name bsPopoverContent\n * @description contents of this element would be transcluded to .popover-content element\n */\n\n/**\n * @ngdoc component\n * @name bsPopover\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param {string} placement\n */\nexport const bsPopoverComponent: IComponentOptions = {\n    template: '<div class=\"popover\" '\n        + 'ng-class=\"{\\'fade\\': bsPpCtrl.animation, \\'show\\': bsPpCtrl.fadeIn}\" '\n        + 'style=\"display: {{bsPpCtrl.visible || bsPpCtrl.fadeIn ? \\'block\\' : \\'none\\'}}\" '\n        + 'ng-show=\"bsPpCtrl.visible || bsPpCtrl.fadeIn\">'\n        + '<div class=\"arrow\"></div>'\n        + '<div class=\"popover-header\" ng-transclude=\"title\" ng-show=\"bsPpCtrl.titleVisible\">'\n        + '{{bsPpCtrl.defaultTitle}}'\n        + '</div>'\n        + '<div class=\"popover-body\" ng-transclude=\"content\" ng-show=\"bsPpCtrl.contentVisible\">'\n        + '{{bsPpCtrl.defaultContent}}'\n        + '</div>'\n        + '</div>',\n    controllerAs: 'bsPpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: {\n        title: '?bsPopoverTitle',\n        content: '?bsPopoverContent'\n    },\n    controller: BsPopoverComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsPopoverComponentController {\n    constructor($scope, $element, $attrs, $timeout, Popover, angularBS) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Popover = Popover;\n        this.angularBS = angularBS;\n        //\n        $attrs.$observe('placement', (value) => {\n            this.placement = value;\n        });\n        // check if title & content are not empty\n        const title = angular.element($element[0].querySelector('.popover-header')), content = angular.element($element[0].querySelector('.popover-body'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n        $scope.$watch(() => {\n            return content.text().trim();\n        }, (nV) => {\n            this.contentVisible = nV !== '';\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Popover.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Popover.delay;\n        }\n        this.placement = this.Popover.placement;\n        this.defaultTitle = this.Popover.title;\n        this.defaultContent = this.Popover.content;\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Popover.delay;\n        }\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Popover.delay;\n            }\n            else {\n                delay = this._delay;\n            }\n            if (this.timeout !== null) {\n                this.$timeout.cancel(this.timeout);\n            }\n            this.timeout = this.$timeout(() => {\n                this.timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(this.$element.children(), this.parentElement, this.placement, this.boundary !== null ? this.boundary : undefined, 'bs-popover-');\n                    }\n                    else { // static popover\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-popover-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                }\n                else if (this.animation && !changes.visible.isFirstChange()) {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n                else {\n                    this.fadeIn = false;\n                }\n            }, delay);\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsPopoverTitle\n * @description contents of this element would be transcluded to .popover-title element\n */\n/**\n * @ngdoc component\n * @name bsPopoverContent\n * @description contents of this element would be transcluded to .popover-content element\n */\n/**\n * @ngdoc component\n * @name bsPopover\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param {string} placement\n */\nexport const bsPopoverComponent = {\n    template: '<div class=\"popover\" '\n        + 'ng-class=\"{\\'fade\\': bsPpCtrl.animation, \\'show\\': bsPpCtrl.fadeIn}\" '\n        + 'style=\"display: {{bsPpCtrl.visible || bsPpCtrl.fadeIn ? \\'block\\' : \\'none\\'}}\" '\n        + 'ng-show=\"bsPpCtrl.visible || bsPpCtrl.fadeIn\">'\n        + '<div class=\"arrow\"></div>'\n        + '<div class=\"popover-header\" ng-transclude=\"title\" ng-show=\"bsPpCtrl.titleVisible\">'\n        + '{{bsPpCtrl.defaultTitle}}'\n        + '</div>'\n        + '<div class=\"popover-body\" ng-transclude=\"content\" ng-show=\"bsPpCtrl.contentVisible\">'\n        + '{{bsPpCtrl.defaultContent}}'\n        + '</div>'\n        + '</div>',\n    controllerAs: 'bsPpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: {\n        title: '?bsPopoverTitle',\n        content: '?bsPopoverContent'\n    },\n    controller: BsPopoverComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {helpers} from '../helpers/helpers.module';\nimport {PopoverProvider} from './popover.provider';\nimport {bsPopoverBoundaryDirective} from './bs-popover-boundary.directive';\nimport {bsPopoverComponent} from './bs-popover.component';\nimport {bsPopoverToggleDirective} from './bs-popover-toggle.directive';\n\nconst popoverModule = angular.module('angularBS.popover', [helpers])\n    .provider('Popover', PopoverProvider)\n    .directive('bsPopoverBoundary', bsPopoverBoundaryDirective)\n    .component('bsPopover', bsPopoverComponent)\n    .directive('bsPopoverToggle', bsPopoverToggleDirective);\n\nexport const angularBSPopover = popoverModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { helpers } from '../helpers/helpers.module';\nimport { PopoverProvider } from './popover.provider';\nimport { bsPopoverBoundaryDirective } from './bs-popover-boundary.directive';\nimport { bsPopoverComponent } from './bs-popover.component';\nimport { bsPopoverToggleDirective } from './bs-popover-toggle.directive';\nconst popoverModule = angular.module('angularBS.popover', [helpers])\n    .provider('Popover', PopoverProvider)\n    .directive('bsPopoverBoundary', bsPopoverBoundaryDirective)\n    .component('bsPopover', bsPopoverComponent)\n    .directive('bsPopoverToggle', bsPopoverToggleDirective);\nexport const angularBSPopover = popoverModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {placement} from '../helpers/angularBS.service';\n\nexport type popoverDelay = number | {show: number, hide: number};\n\nexport interface IPopoverOptions {\n    animation: boolean,\n    delay: popoverDelay,\n    html: boolean,\n    placement: placement,\n    title: string,\n    content: string,\n    trigger: 'click' | 'hover' | 'focus' | string\n}\n\nexport class PopoverProvider {\n    public config: IPopoverOptions ={\n        animation: true,\n        delay: 0,\n        html: false,\n        placement: 'right',\n        title: '',\n        content: '',\n        trigger: 'click'\n    }\n\n    $get(): IPopoverOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class PopoverProvider {\n    constructor() {\n        this.config = {\n            animation: true,\n            delay: 0,\n            html: false,\n            placement: 'right',\n            title: '',\n            content: '',\n            trigger: 'click'\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompileService, IComponentOptions, IOnChangesObject, IScope, ITranscludeFunction} from 'angular';\nimport {IToastsOptions} from './toasts.provider';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsToastComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $compile: ICompileService;\n    private Toasts: IToastsOptions;\n    private animation: boolean;\n    private visible: boolean;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $transclude: ITranscludeFunction,\n        $compile: ICompileService,\n        Toasts: IToastsOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n        this.Toasts = Toasts;\n\n        $transclude((elements, scope) => {\n            let header, body;\n            for (let i = 0; i < elements.length; i++) {\n                if (elements[i].tagName === 'BS-TOAST-HEADER') {\n                    header = elements[i];\n                } else if (elements[i].tagName === 'BS-TOAST-BODY') {\n                    body = elements[i];\n                }\n            }\n            if (header) {\n                header = angular.element(header);\n                header.addClass('toast-header');\n                $element.children().append($compile(header)(scope))\n            }\n            if (body) {\n                body = angular.element(body);\n                body.addClass('toast-body d-block');\n                $element.children().append($compile(body)(scope))\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Toasts.animation;\n        }\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = !!changes.visible.currentValue;\n            if (this.animation && !this.visible && !changes.visible.isFirstChange()) {\n                // properly display fade out animation\n                this.visible = true;\n                this.fadeIn = false;\n                const transition = () => {\n                    this.visible = false;\n                    this.$element.children()[0].removeEventListener('transitionend', transition);\n                    this.$scope.$digest();\n                };\n                this.$element.children()[0].addEventListener('transitionend', transition);\n            } else {\n                this.fadeIn = this.visible;\n            }\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsToastHeader\n * @description contents of this element would be transcluded to .toast-header element\n */\n/**\n * @ngdoc component\n * @name bsToastBody\n * @description contents of this element would be transcluded to .toast-body element\n */\n/**\n * @ngdoc component\n * @name bsToast\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n */\nexport const bsToastComponent: IComponentOptions = {\n    template: '<div class=\"toast\" '\n        + 'ng-class=\"{\\'fade\\': vm.animation, \\'show\\': vm.fadeIn}\" '\n        + 'style=\"display: {{vm.visible || vm.fadeIn ? \\'block\\' : \\'none\\'}}\">'\n        + '</div>',\n    controllerAs: 'vm',\n    bindings: {\n        visible: '<',\n        animation: '<'\n    },\n    transclude: true,\n    controller: BsToastComponentController\n};\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsToastComponentController {\n    constructor($scope, $element, $transclude, $compile, Toasts) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n        this.Toasts = Toasts;\n        $transclude((elements, scope) => {\n            let header, body;\n            for (let i = 0; i < elements.length; i++) {\n                if (elements[i].tagName === 'BS-TOAST-HEADER') {\n                    header = elements[i];\n                }\n                else if (elements[i].tagName === 'BS-TOAST-BODY') {\n                    body = elements[i];\n                }\n            }\n            if (header) {\n                header = angular.element(header);\n                header.addClass('toast-header');\n                $element.children().append($compile(header)(scope));\n            }\n            if (body) {\n                body = angular.element(body);\n                body.addClass('toast-body d-block');\n                $element.children().append($compile(body)(scope));\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Toasts.animation;\n        }\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = !!changes.visible.currentValue;\n            if (this.animation && !this.visible && !changes.visible.isFirstChange()) {\n                // properly display fade out animation\n                this.visible = true;\n                this.fadeIn = false;\n                const transition = () => {\n                    this.visible = false;\n                    this.$element.children()[0].removeEventListener('transitionend', transition);\n                    this.$scope.$digest();\n                };\n                this.$element.children()[0].addEventListener('transitionend', transition);\n            }\n            else {\n                this.fadeIn = this.visible;\n            }\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsToastHeader\n * @description contents of this element would be transcluded to .toast-header element\n */\n/**\n * @ngdoc component\n * @name bsToastBody\n * @description contents of this element would be transcluded to .toast-body element\n */\n/**\n * @ngdoc component\n * @name bsToast\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n */\nexport const bsToastComponent = {\n    template: '<div class=\"toast\" '\n        + 'ng-class=\"{\\'fade\\': vm.animation, \\'show\\': vm.fadeIn}\" '\n        + 'style=\"display: {{vm.visible || vm.fadeIn ? \\'block\\' : \\'none\\'}}\">'\n        + '</div>',\n    controllerAs: 'vm',\n    bindings: {\n        visible: '<',\n        animation: '<'\n    },\n    transclude: true,\n    controller: BsToastComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {ToastsProvider} from './toasts.provider';\nimport {bsToastComponent} from './bs-toast.component';\n\nconst toastsModule = angular.module('angularBS.toasts', [])\n    .provider('Toasts', ToastsProvider)\n    .component('bsToast', bsToastComponent);\n\nexport const angularBSToasts = toastsModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { ToastsProvider } from './toasts.provider';\nimport { bsToastComponent } from './bs-toast.component';\nconst toastsModule = angular.module('angularBS.toasts', [])\n    .provider('Toasts', ToastsProvider)\n    .component('bsToast', bsToastComponent);\nexport const angularBSToasts = toastsModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface IToastsOptions {\n    animation: boolean\n}\n\nexport class ToastsProvider {\n    public config: IToastsOptions = {\n        animation: true\n    }\n\n    $get(): IToastsOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class ToastsProvider {\n    constructor() {\n        this.config = {\n            animation: true\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nclass BsTooltipBoundaryDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsTooltipBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsTooltipBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nclass BsTooltipBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsTooltipBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsTooltipBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, ICompileService, IDirective, IDocumentService, ISCEService, IScope} from 'angular';\nimport {ITooltipOptions} from './tooltip.provider';\nimport * as angular from 'angular';\nimport {placement} from '../helpers/angularBS.service';\n\ninterface IBSTooltipScope extends IScope {\n    bsTpCtrl: BsTooltipToggleDirectiveController\n}\n\n/**\n * @ngInject\n */\nexport class BsTooltipToggleDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private $document: IDocumentService;\n    private $sce: ISCEService;\n    private Tooltip: ITooltipOptions;\n    private _tooltipElement: JQLite = null;\n    private html: boolean;\n    private title: string;\n    private bsTooltipToggle: boolean;\n    private placement: placement;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $compile: ICompileService,\n        $document: IDocumentService,\n        $sce: ISCEService,\n        Tooltip: ITooltipOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Tooltip = Tooltip;\n\n        $attrs.$observe('title', (value) => {\n            if (!(angular.isDefined(this.html) && this.html) || Tooltip.html) {\n                value = (value as string).replace(/[\\u00A0-\\u9999<>&'\"]/gim, (i) => {\n                    return '&#' + i.charCodeAt(0) + ';'\n                });\n            }\n            this.title = $sce.trustAsHtml(value);\n            $element.attr('title', '');\n        });\n\n        const watcher = $scope.$watch(() => {\n            return this.bsTooltipToggle;\n        }, (nV) => {\n            if (nV) {\n                $compile(\n                    '<bs-tooltip visible=\"bsTpCtrl.bsTooltipToggle\" animation=\"bsTpCtrl.animation\" '\n                    + 'delay=\"bsTpCtrl.delay\" placement=\"{{bsTpCtrl.placement}}\" '\n                    + 'parent-element=\"bsTpCtrl.$element\" '\n                    + 'boundary=\"bsTpCtrl.boundary\">'\n                    + '<span ng-bind-html=\"bsTpCtrl.title\"></span></bs-tooltip>'\n                )($scope.$new(), (newElement, newScope: IBSTooltipScope) => {\n                    newScope.bsTpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this._tooltipElement = newElement;\n                });\n                watcher(); // create tooltip element once and leave it be\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.bsTooltipToggle)) {\n            this.bsTooltipToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Tooltip.trigger : this.$attrs.trigger)\n                .split(' '),\n            open = () => {\n                this.bsTooltipToggle = true;\n                this.$scope.$digest();\n            },\n            close = () => {\n                this.bsTooltipToggle = false;\n                this.$scope.$digest();\n            };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('focus', open);\n            this.$element.on('blur', close);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsTooltipToggle = !this.bsTooltipToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Tooltip.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Tooltip.title);\n    }\n\n    $onDestroy(): void {\n        if (this._tooltipElement !== null) {\n            this._tooltipElement.remove();\n        }\n    }\n}\n\nexport function bsTooltipToggleDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsTooltipToggle\n     *\n     * @param {expression|boolean} bsTooltipToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsTooltipToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsTooltipBoundary', 'bsTooltipToggle'],\n        controllerAs: 'bsTpCtrl',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsTooltipToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class BsTooltipToggleDirectiveController {\n    constructor($scope, $element, $attrs, $compile, $document, $sce, Tooltip) {\n        this._tooltipElement = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Tooltip = Tooltip;\n        $attrs.$observe('title', (value) => {\n            if (!(angular.isDefined(this.html) && this.html) || Tooltip.html) {\n                value = value.replace(/[\\u00A0-\\u9999<>&'\"]/gim, (i) => {\n                    return '&#' + i.charCodeAt(0) + ';';\n                });\n            }\n            this.title = $sce.trustAsHtml(value);\n            $element.attr('title', '');\n        });\n        const watcher = $scope.$watch(() => {\n            return this.bsTooltipToggle;\n        }, (nV) => {\n            if (nV) {\n                $compile('<bs-tooltip visible=\"bsTpCtrl.bsTooltipToggle\" animation=\"bsTpCtrl.animation\" '\n                    + 'delay=\"bsTpCtrl.delay\" placement=\"{{bsTpCtrl.placement}}\" '\n                    + 'parent-element=\"bsTpCtrl.$element\" '\n                    + 'boundary=\"bsTpCtrl.boundary\">'\n                    + '<span ng-bind-html=\"bsTpCtrl.title\"></span></bs-tooltip>')($scope.$new(), (newElement, newScope) => {\n                    newScope.bsTpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this._tooltipElement = newElement;\n                });\n                watcher(); // create tooltip element once and leave it be\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.bsTooltipToggle)) {\n            this.bsTooltipToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Tooltip.trigger : this.$attrs.trigger)\n            .split(' '), open = () => {\n            this.bsTooltipToggle = true;\n            this.$scope.$digest();\n        }, close = () => {\n            this.bsTooltipToggle = false;\n            this.$scope.$digest();\n        };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('focus', open);\n            this.$element.on('blur', close);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsTooltipToggle = !this.bsTooltipToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Tooltip.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Tooltip.title);\n    }\n    $onDestroy() {\n        if (this._tooltipElement !== null) {\n            this._tooltipElement.remove();\n        }\n    }\n}\nexport function bsTooltipToggleDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsTooltipToggle\n     *\n     * @param {expression|boolean} bsTooltipToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsTooltipToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsTooltipBoundary', 'bsTooltipToggle'],\n        controllerAs: 'bsTpCtrl',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsTooltipToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, IComponentOptions, IOnChangesObject, IPromise, IScope, ITimeoutService} from 'angular';\nimport {ITooltipOptions, tooltipDelay} from './tooltip.provider';\nimport {AngularBSService, placement} from '../helpers/angularBS.service';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsTooltipComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $timeout: ITimeoutService;\n    private Tooltip: ITooltipOptions;\n    private angularBS: AngularBSService;\n    private _delay: tooltipDelay;\n    private _timeout: IPromise<void> = null;\n    private placement: placement;\n    private titleVisible: boolean;\n    private animation: boolean;\n    private delay: tooltipDelay;\n    private defaultTitle: string;\n    private visible: boolean;\n    private parentElement: JQLite;\n    private boundary: JQLite;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $timeout: ITimeoutService,\n        Tooltip: ITooltipOptions,\n        angularBS: AngularBSService\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Tooltip = Tooltip;\n        this.angularBS = angularBS;\n\n        $attrs.$observe('placement', (value) => {\n            this.placement = value as string;\n        });\n        // check if title is not empty\n        const title = angular.element($element[0].querySelector('.tooltip-inner'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Tooltip.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Tooltip.delay;\n        }\n        this.placement = this.Tooltip.placement;\n        this.defaultTitle = this.Tooltip.title;\n        this.$element.children().css({top: 0});\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Tooltip.delay;\n        }\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay: number;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Tooltip.delay;\n            } else {\n                delay = this._delay;\n            }\n            if (this._timeout !== null) {\n                this.$timeout.cancel(this._timeout);\n            }\n            this._timeout = this.$timeout(() => {\n                this._timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(\n                            this.$element.children(), this.parentElement, this.placement,\n                            this.boundary !== null ? this.boundary : undefined,\n                            'bs-tooltip-'\n                        );\n                    } else { // static tooltip\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-tooltip-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                } else {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n            }, delay);\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsTooltip\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param placement\n */\nexport const bsTooltipComponent: IComponentOptions = {\n    template: '<div class=\"tooltip\" '\n        + 'ng-class=\"{\\'fade\\': bsTpCtrl.animation, \\'show\\': bsTpCtrl.fadeIn}\" '\n        + 'ng-show=\"bsTpCtrl.visible || bsTpCtrl.fadeIn\">'\n        + '<div class=\"arrow\" ng-show=\"bsTpCtrl.titleVisible\"></div>'\n        + '<div class=\"tooltip-inner\" ng-transclude ng-show=\"bsTpCtrl.titleVisible\">{{bsTpCtrl.defaultTitle}}</div>'\n        + '</div>',\n    controllerAs: 'bsTpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: true,\n    controller: BsTooltipComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsTooltipComponentController {\n    constructor($scope, $element, $attrs, $timeout, Tooltip, angularBS) {\n        this._timeout = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Tooltip = Tooltip;\n        this.angularBS = angularBS;\n        $attrs.$observe('placement', (value) => {\n            this.placement = value;\n        });\n        // check if title is not empty\n        const title = angular.element($element[0].querySelector('.tooltip-inner'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Tooltip.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Tooltip.delay;\n        }\n        this.placement = this.Tooltip.placement;\n        this.defaultTitle = this.Tooltip.title;\n        this.$element.children().css({ top: 0 });\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Tooltip.delay;\n        }\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Tooltip.delay;\n            }\n            else {\n                delay = this._delay;\n            }\n            if (this._timeout !== null) {\n                this.$timeout.cancel(this._timeout);\n            }\n            this._timeout = this.$timeout(() => {\n                this._timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(this.$element.children(), this.parentElement, this.placement, this.boundary !== null ? this.boundary : undefined, 'bs-tooltip-');\n                    }\n                    else { // static tooltip\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-tooltip-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                }\n                else {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n            }, delay);\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsTooltip\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param placement\n */\nexport const bsTooltipComponent = {\n    template: '<div class=\"tooltip\" '\n        + 'ng-class=\"{\\'fade\\': bsTpCtrl.animation, \\'show\\': bsTpCtrl.fadeIn}\" '\n        + 'ng-show=\"bsTpCtrl.visible || bsTpCtrl.fadeIn\">'\n        + '<div class=\"arrow\" ng-show=\"bsTpCtrl.titleVisible\"></div>'\n        + '<div class=\"tooltip-inner\" ng-transclude ng-show=\"bsTpCtrl.titleVisible\">{{bsTpCtrl.defaultTitle}}</div>'\n        + '</div>',\n    controllerAs: 'bsTpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: true,\n    controller: BsTooltipComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IInjectorService = angular.auto.IInjectorService;\nimport {IDirective} from 'angular';\nimport {BsTooltipToggleDirectiveController} from './bs-tooltip-toggle.directive';\n\n/**\n * @ngInject\n */\nexport class BsTooltipFactory {\n    private $injector: IInjectorService;\n\n    constructor($injector: IInjectorService) {\n        this.$injector = $injector;\n    }\n\n    customBindingDirective(): IDirective {\n        return {\n            restrict: 'A',\n            require: '?^bsTooltipBoundary',\n            compile: (element, attrs) => {\n                if (!('bsTooltipToggle' in attrs) && !('bsPopoverToggle' in attrs)) {\n                    return (scope, element, attrs, ctrl) => {\n                        const directive = this.$injector.get('bsTooltipToggleDirective')[0],\n                            bsTooltipToggleCtrl = this.$injector.instantiate(directive.controller, {\n                                '$scope': scope,\n                                '$element': element,\n                                '$attrs': attrs\n                            }) as BsTooltipToggleDirectiveController;\n                        directive.compile(\n                            element, scope, attrs, [ctrl, bsTooltipToggleCtrl]\n                        )(\n                            scope, element, attrs, [ctrl, bsTooltipToggleCtrl]\n                        );\n                        bsTooltipToggleCtrl.$onInit();\n                        element.on('$destroy', function() {\n                            bsTooltipToggleCtrl.$onDestroy();\n                        });\n                    }\n                }\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n/**\n * @ngInject\n */\nexport class BsTooltipFactory {\n    constructor($injector) {\n        this.$injector = $injector;\n    }\n    customBindingDirective() {\n        return {\n            restrict: 'A',\n            require: '?^bsTooltipBoundary',\n            compile: (element, attrs) => {\n                if (!('bsTooltipToggle' in attrs) && !('bsPopoverToggle' in attrs)) {\n                    return (scope, element, attrs, ctrl) => {\n                        const directive = this.$injector.get('bsTooltipToggleDirective')[0], bsTooltipToggleCtrl = this.$injector.instantiate(directive.controller, {\n                            '$scope': scope,\n                            '$element': element,\n                            '$attrs': attrs\n                        });\n                        directive.compile(element, scope, attrs, [ctrl, bsTooltipToggleCtrl])(scope, element, attrs, [ctrl, bsTooltipToggleCtrl]);\n                        bsTooltipToggleCtrl.$onInit();\n                        element.on('$destroy', function () {\n                            bsTooltipToggleCtrl.$onDestroy();\n                        });\n                    };\n                }\n            }\n        };\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {helpers} from '../helpers/helpers.module';\nimport * as angular from 'angular';\nimport {TooltipProvider} from './tooltip.provider';\nimport {bsTooltipBoundaryDirective} from './bs-tooltip-boundary.directive';\nimport {BsTooltipFactory} from './bs-tooltip.factory';\nimport {bsTooltipToggleDirective} from './bs-tooltip-toggle.directive';\nimport {bsTooltipComponent} from './bs-tooltip.component';\n\nconst tooltipModule = angular.module('angularBS.tooltip', [helpers])\n    .provider('Tooltip', TooltipProvider)\n    .factory('bsTooltipFactory',  BsTooltipFactory)\n    .directive('bsTooltipBoundary', bsTooltipBoundaryDirective)\n    .directive('bsTooltipToggle', bsTooltipToggleDirective)\n    .component('bsTooltip', bsTooltipComponent);\n\nexport const angularBSTooltip = tooltipModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport { helpers } from '../helpers/helpers.module';\nimport * as angular from 'angular';\nimport { TooltipProvider } from './tooltip.provider';\nimport { bsTooltipBoundaryDirective } from './bs-tooltip-boundary.directive';\nimport { BsTooltipFactory } from './bs-tooltip.factory';\nimport { bsTooltipToggleDirective } from './bs-tooltip-toggle.directive';\nimport { bsTooltipComponent } from './bs-tooltip.component';\nconst tooltipModule = angular.module('angularBS.tooltip', [helpers])\n    .provider('Tooltip', TooltipProvider)\n    .factory('bsTooltipFactory', BsTooltipFactory)\n    .directive('bsTooltipBoundary', bsTooltipBoundaryDirective)\n    .directive('bsTooltipToggle', bsTooltipToggleDirective)\n    .component('bsTooltip', bsTooltipComponent);\nexport const angularBSTooltip = tooltipModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {placement} from '../helpers/angularBS.service';\n\nexport type tooltipDelay = number | { show: number, hide: number };\n\nexport interface ITooltipOptions {\n    animation: boolean,\n    delay: tooltipDelay,\n    placement: placement,\n    html: boolean,\n    title: string,\n    trigger: 'click' | 'hover' | 'focus' | string\n}\n\nexport class TooltipProvider {\n    public config: ITooltipOptions = {\n        animation: true,\n        delay: 0,\n        placement: 'bottom',\n        html: false,\n        title: '',\n        trigger: 'hover focus'\n    }\n\n    $get(): ITooltipOptions {\n        return this.config;\n    }\n}\n","export class TooltipProvider {\n    constructor() {\n        this.config = {\n            animation: true,\n            delay: 0,\n            placement: 'bottom',\n            html: false,\n            title: '',\n            trigger: 'hover focus'\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_angular__;","module.exports = __WEBPACK_EXTERNAL_MODULE_angular_animate__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {angularBS} from './lib/angularBS.module';\nexport * from './lib/carousel/carousel.provider';\nexport * from './lib/helpers/angularBS.service';\nexport * from './lib/modal/modal.provider';\nexport {BSModalController} from './lib/modal/bs-modal.directive';\nexport * from './lib/popover/popover.provider';\nexport * from './lib/toasts/toasts.provider';\nexport * from './lib/tooltip/tooltip.provider';\n\nexport default angularBS;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport { angularBS } from './lib/angularBS.module';\nexport * from './lib/carousel/carousel.provider';\nexport * from './lib/helpers/angularBS.service';\nexport * from './lib/modal/modal.provider';\nexport { BSModalController } from './lib/modal/bs-modal.directive';\nexport * from './lib/popover/popover.provider';\nexport * from './lib/toasts/toasts.provider';\nexport * from './lib/tooltip/tooltip.provider';\nexport default angularBS;\n"],"sourceRoot":""}