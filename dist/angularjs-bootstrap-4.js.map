{"version":3,"sources":["webpack://angularBS/webpack/universalModuleDefinition","webpack://angularBS/./.build/src/lib/angularBS.module.ts","webpack://angularBS/./.build/lib/lib/angularBS.module.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-indicators.component.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-indicators.component.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-item.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-item.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel-nav.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel-nav.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/bs-carousel.directive.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/bs-carousel.directive.js","webpack://angularBS/./.build/lib/src/lib/carousel/carousel.module.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/carousel.module.js","webpack://angularBS/./.build/lib/src/lib/carousel/carousel.provider.ts","webpack://angularBS/./.build/lib/carousel/lib/carousel/carousel.provider.js","webpack://angularBS/./.build/lib/src/lib/collapse/bs-collapse-group.directive.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/bs-collapse-group.directive.js","webpack://angularBS/./.build/lib/src/lib/collapse/bs-collapse.directive.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/bs-collapse.directive.js","webpack://angularBS/./.build/lib/src/lib/collapse/collapse.module.ts","webpack://angularBS/./.build/lib/collapse/lib/collapse/collapse.module.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown-boundary.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown-toggle.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/bs-dropdown.directive.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/bs-dropdown.directive.js","webpack://angularBS/./.build/lib/src/lib/dropdown/dropdown.module.ts","webpack://angularBS/./.build/lib/dropdown/lib/dropdown/dropdown.module.js","webpack://angularBS/./.build/lib/src/lib/helpers/angularBS.service.ts","webpack://angularBS/./.build/lib/helpers/lib/helpers/angularBS.service.js","webpack://angularBS/./.build/lib/src/lib/helpers/helpers.module.ts","webpack://angularBS/./.build/lib/helpers/lib/helpers/helpers.module.js","webpack://angularBS/./.build/lib/src/lib/modal/bs-modal-backdrop.component.ts","webpack://angularBS/./.build/lib/modal/lib/modal/bs-modal-backdrop.component.js","webpack://angularBS/./.build/lib/src/lib/modal/bs-modal.directive.ts","webpack://angularBS/./.build/lib/modal/lib/modal/bs-modal.directive.js","webpack://angularBS/./.build/lib/src/lib/modal/dismiss.directive.ts","webpack://angularBS/./.build/lib/modal/lib/modal/dismiss.directive.js","webpack://angularBS/./.build/lib/src/lib/modal/modal-backdrop.factory.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal-backdrop.factory.js","webpack://angularBS/./.build/lib/src/lib/modal/modal.module.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal.module.js","webpack://angularBS/./.build/lib/src/lib/modal/modal.provider.ts","webpack://angularBS/./.build/lib/modal/lib/modal/modal.provider.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover-boundary.directive.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover-toggle.directive.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/popover/bs-popover.component.ts","webpack://angularBS/./.build/lib/popover/lib/popover/bs-popover.component.js","webpack://angularBS/./.build/lib/src/lib/popover/popover.module.ts","webpack://angularBS/./.build/lib/popover/lib/popover/popover.module.js","webpack://angularBS/./.build/lib/src/lib/popover/popover.provider.ts","webpack://angularBS/./.build/lib/popover/lib/popover/popover.provider.js","webpack://angularBS/./.build/lib/src/lib/toasts/bs-toast.component.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/bs-toast.component.js","webpack://angularBS/./.build/lib/src/lib/toasts/toasts.module.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/toasts.module.js","webpack://angularBS/./.build/lib/src/lib/toasts/toasts.provider.ts","webpack://angularBS/./.build/lib/toasts/lib/toasts/toasts.provider.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip-boundary.directive.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip-boundary.directive.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip-toggle.directive.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip-toggle.directive.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip.component.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip.component.js","webpack://angularBS/./.build/lib/src/lib/tooltip/bs-tooltip.factory.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/bs-tooltip.factory.js","webpack://angularBS/./.build/lib/src/lib/tooltip/tooltip.module.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/tooltip.module.js","webpack://angularBS/./.build/lib/src/lib/tooltip/tooltip.provider.ts","webpack://angularBS/./.build/lib/tooltip/lib/tooltip/tooltip.provider.js","webpack://angularBS/./node_modules/angular-animate/angular-animate.js","webpack://angularBS/./node_modules/angular-animate/index.js","webpack://angularBS/external \"angular\"","webpack://angularBS/webpack/bootstrap","webpack://angularBS/webpack/runtime/compat get default export","webpack://angularBS/webpack/runtime/define property getters","webpack://angularBS/webpack/runtime/hasOwnProperty shorthand","webpack://angularBS/webpack/runtime/make namespace object","webpack://angularBS/./src/angularjs-bootstrap-4.ts","webpack://angularBS/./.build/angularjs-bootstrap-4.js"],"names":[],"mappings":"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ACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iDAAiD;AACjD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA,uEAAuE,MAAM;AAC7E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC,gBAAgB,uBAAuB;AACvC;AACA,UAAU;AACV;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC,gBAAgB,uBAAuB;AACvC;AACA,UAAU;AACV;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qGAAqG;AACrG,SAAS,gBAAgB;AACzB,gBAAgB,gBAAgB;AAChC;AACA,SAAS,sGAAsG;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,SAAS,uBAAuB;AAChC;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C,SAAS,+BAA+B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,UAAU;AACV,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,SAAS,2BAA2B;AACpC;AACA;AACA;AACA,WAAW,iCAAiC;AAC5C,SAAS,mCAAmC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uDAAuD;AACrE;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,2GAA2G;AAChH,mIAAmI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA,WAAW;AACX,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oDAAoD,EAAE;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,iBAAiB,uBAAuB;AACxC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,EAAE;AACpC,4BAA4B,aAAa;AACzC,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA,yBAAyB,uBAAuB;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA;;AAEA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gBAAgB;AAC1B,YAAY,kBAAkB;AAC9B,WAAW,iBAAiB;AAC5B,aAAa,mBAAmB;AAChC,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iDAAiD,+CAA+C,oDAAoD;AAC1J,MAAM,iEAAiE;AACvE,MAAM,kDAAkD,WAAW,OAAO,OAAO;AACjF,MAAM,sDAAsD;AAC5D,MAAM,oDAAoD;AAC1D,MAAM,4CAA4C;AAClD,MAAM,wCAAwC;AAC9C,MAAM,kDAAkD;AACxD,MAAM,4DAA4D;AAClE,MAAM,8CAA8C;AACpD,MAAM,8CAA8C,kDAAkD,uDAAuD;AAC7J,MAAM,gDAAgD;AACtD,MAAM,4CAA4C;AAClD,MAAM,gDAAgD;AACtD,MAAM,iDAAiD;AACvD;AACA;AACA;AACA;AACA,IAAI,sCAAsC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sDAAsD;AAC/D;AACA;AACA;AACA;AACA;AACA,SAAS,uDAAuD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS,sEAAsE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,SAAS,WAAW;AACpB;AACA;AACA;AACA,WAAW,WAAW;AACtB,SAAS,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C;AACA;AACA;AACA;AACA,WAAW,2EAA2E;AACtF;AACA;AACA,WAAW;AACX,gFAAgF;AAChF;AACA;AACA,WAAW;AACX;AACA,8BAA8B,MAAM;AACpC;AACA;AACA,WAAW,iCAAiC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B,6BAA6B;AAC7B;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAA8D;AAC/F,sDAAsD,wCAAwC;AAC9F,mBAAmB,8DAA8D;AACjF;AACA,cAAc,wCAAwC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B,gBAAgB;AAChB,UAAU;AACV;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAkE;AAC3E,oBAAoB,4BAA4B;AAChD;AACA,SAAS;AACT,uDAAuD;AACvD,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,6DAA6D,gDAAgD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,aAAa,mCAAmC;AAChD,aAAa,mCAAmC;AAChD,aAAa,kCAAkC;AAC/C,aAAa,6BAA6B;AAC1C,aAAa,6BAA6B;AAC1C,aAAa,wCAAwC;AACrD,aAAa,mCAAmC;AAChD,aAAa,oCAAoC;AACjD,aAAa,6BAA6B;AAC1C,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C,2BAA2B,aAAa;AACxC;AACA,UAAU;AACV;AACA;AACA;AACA,oDAAoD,cAAc;AAClE,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uEAAuE;AAChF,oBAAoB,4BAA4B,kBAAkB,aAAa;AAC/E;AACA;AACA;AACA,kCAAkC,4CAA4C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAiE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS,0BAA0B;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA,CAAC;;;;;;;;;;;AC/qID,mBAAO,CAAC,4EAAmB;AAC3B;;;;;;;;;;;;ACDA,qD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;;;;AAKiD;AACA;AACD;AACL;AACsB;AAClB;AACF;AACE;AAE/C,iEAAe,4DAAS,EAAC;ACAzB","file":"angularjs-bootstrap-4.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angularjs-bootstrap-4\", [\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-bootstrap-4\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"angularjs-bootstrap-4\"] = factory(root[\"angular\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_angular__) {\nreturn ","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {angularBSCarousel} from './carousel/carousel.module';\nimport {angularBSCollapse} from './collapse/collapse.module';\nimport {angularBSDropdown} from './dropdown/dropdown.module';\nimport {angularBSModal} from './modal/modal.module';\nimport {angularBSPopover} from './popover/popover.module';\nimport {angularBSToasts} from './toasts/toasts.module';\nimport {angularBSTooltip} from './tooltip/tooltip.module';\n\nconst angularBSModule = angular.module('angularBS', [\n    angularBSModal, angularBSDropdown, angularBSTooltip, angularBSPopover, angularBSCollapse,\n    angularBSCarousel, angularBSToasts\n]);\n\nexport const angularBS = angularBSModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { angularBSCarousel } from './carousel/carousel.module';\nimport { angularBSCollapse } from './collapse/collapse.module';\nimport { angularBSDropdown } from './dropdown/dropdown.module';\nimport { angularBSModal } from './modal/modal.module';\nimport { angularBSPopover } from './popover/popover.module';\nimport { angularBSToasts } from './toasts/toasts.module';\nimport { angularBSTooltip } from './tooltip/tooltip.module';\nconst angularBSModule = angular.module('angularBS', [\n    angularBSModal, angularBSDropdown, angularBSTooltip, angularBSPopover, angularBSCollapse,\n    angularBSCarousel, angularBSToasts\n]);\nexport const angularBS = angularBSModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const bsCarouselIndicatorsComponent: IComponentOptions = {\n    template: '<ol class=\"carousel-indicators\">'\n        + '<li ng-repeat=\"s in ctrl.carousel.slides\" ng-click=\"ctrl.carousel.slideTo($index)\" '\n        + 'ng-class=\"{active: $index === ctrl.carousel.currentSlide}\"></li>'\n        + '</ol>',\n    require: {\n        carousel: '^bsCarousel'\n    },\n    controllerAs: 'ctrl'\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport const bsCarouselIndicatorsComponent = {\n    template: '<ol class=\"carousel-indicators\">'\n        + '<li ng-repeat=\"s in ctrl.carousel.slides\" ng-click=\"ctrl.carousel.slideTo($index)\" '\n        + 'ng-class=\"{active: $index === ctrl.carousel.currentSlide}\"></li>'\n        + '</ol>',\n    require: {\n        carousel: '^bsCarousel'\n    },\n    controllerAs: 'ctrl'\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nclass BsCarouselItemDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n\n    $onInit() {\n        this.$element.addClass('carousel-item');\n    }\n}\n\nexport function bsCarouselItemDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl.register(element);\n        },\n        controller: BsCarouselItemDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nclass BsCarouselItemDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n    $onInit() {\n        this.$element.addClass('carousel-item');\n    }\n}\nexport function bsCarouselItemDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl.register(element);\n        },\n        controller: BsCarouselItemDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\nexport function bsCarouselNavDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function(scope, element, attrs, ctrl) {\n            element.on('click', function() {\n                ctrl.prevNextSlide(attrs['bsCarouselNav'] === 'right');\n                scope.$digest();\n            });\n        }\n    };\n}\n","export function bsCarouselNavDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsCarousel',\n        link: function (scope, element, attrs, ctrl) {\n            element.on('click', function () {\n                ctrl.prevNextSlide(attrs['bsCarouselNav'] === 'right');\n                scope.$digest();\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, IDirective, IIntervalService, IScope} from 'angular';\nimport {ICarouselOptions} from './carousel.provider';\nimport * as angular from 'angular';\n\ntype direction = 'left' | 'right';\n\n/**\n * @ngInject\n */\nclass BsCarouselDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private readonly $attrs: IAttributes;\n    private readonly $interval: IIntervalService;\n    private Carousel: ICarouselOptions;\n    private carouselInterval = null;\n    private slides = [];\n    private currentSlide = -1;\n    private sliding = false;\n    private wrap: boolean;\n    private keyboard: boolean;\n\n    constructor(\n        $scope: IScope, $element: JQLite, $attrs: IAttributes, $interval: IIntervalService,\n        Carousel: ICarouselOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$interval = $interval;\n        this.Carousel = Carousel;\n\n        this.$element.on('keydown', (e) => {\n            if (\n                !this.keyboard\n                || (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight')\n                || /input|textarea/i.test(e.target.tagName)\n            ) {\n                return;\n            }\n            if (e.key === 'ArrowLeft') {\n                this.prevNextSlide(false);\n            } else {\n                this.prevNextSlide(true);\n            }\n            $scope.$digest();\n            e.preventDefault();\n        });\n    }\n\n    $onInit(): void {\n        const interval = 'interval' in this.$attrs ? parseInt(this.$attrs['interval']) : this.Carousel.interval,\n            pause = 'pause' in this.$attrs ? this.$attrs['pause'] === 'hover' : this.Carousel.pause;\n        if (interval) {\n            const cycle = () => {\n                this.carouselInterval = this.$interval(() => {\n                    this.prevNextSlide(true);\n                }, interval);\n            };\n            if (pause) {\n                this.$element.on('mouseenter', () => {\n                    this.$interval.cancel(this.carouselInterval);\n                });\n                this.$element.on('mouseleave', cycle);\n            }\n            cycle();\n        }\n    }\n\n    $onChanges(): void {\n        if (angular.isUndefined(this.wrap)) {\n            this.wrap = this.Carousel.wrap;\n        }\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Carousel.keyboard;\n        }\n    }\n\n    $onDestroy() {\n        if (this.carouselInterval !== null) {\n            this.$interval.cancel(this.carouselInterval);\n        }\n    }\n\n    register($element: JQLite): void {\n        this.slides.push($element);\n        if ($element.hasClass('active')) {\n            if (~this.currentSlide) {\n                this.slides[this.currentSlide].removeClass('active');\n            }\n            this.currentSlide = this.slides.length - 1;\n        } else if (!~this.currentSlide) {\n            $element.addClass('active');\n            this.currentSlide = this.slides.length - 1;\n        }\n    }\n\n    unregister($element: JQLite): void {\n        this.slides.splice(this.slides.indexOf($element, 1));\n    }\n\n    prevNextSlide(isNext: boolean): void {\n        const nextIndex = isNext ? this.currentSlide + 1 : this.currentSlide - 1;\n        if (\n            (nextIndex >= this.slides.length || nextIndex < 0)\n            && !this.wrap\n        ) {\n            return;\n        }\n        this.slideTo(nextIndex, isNext ? 'left' : 'right');\n    }\n\n    slideTo(index: number, direction: direction): void {\n        if (index < 0) {\n            index = this.slides.length - 1;\n        } else if (index >= this.slides.length) {\n            index = 0;\n        }\n        this.changeSlide(index, direction);\n    }\n\n    private changeSlide(nextSlide: number, direction?: direction) {\n        if (nextSlide !== this.currentSlide && !this.sliding) {\n            this.sliding = true;\n            if (angular.isUndefined(direction)) {\n                direction = nextSlide > this.currentSlide ? 'left' : 'right';\n            }\n            const next = this.slides[nextSlide],\n                active = this.slides[this.currentSlide],\n                transition = () => {\n                    active[0].removeEventListener('transitionend', transition);\n                    next.removeClass(\n                        'carousel-item-next carousel-item-prev carousel-item-' + direction)\n                        .addClass('active');\n                    active.removeClass('active carousel-item-' + direction);\n                    this.sliding = false;\n                };\n            next.addClass(direction === 'left' ? 'carousel-item-next' : 'carousel-item-prev');\n            next[0].offsetWidth; // force reflow\n            active.addClass('carousel-item-' + direction);\n            next.addClass('carousel-item-' + direction);\n            active[0].addEventListener('transitionend', transition);\n            this.currentSlide = nextSlide;\n        }\n    }\n}\n\nexport function bsCarouselDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsCarousel\n     *\n     * @param interval\n     * @param pause\n     * @param {expression|boolean} wrap\n     * @param {expression|boolean} keyboard\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            wrap: '<?',\n            keyboard: '<?'\n        },\n        controller: BsCarouselDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsCarouselDirectiveController {\n    constructor($scope, $element, $attrs, $interval, Carousel) {\n        this.carouselInterval = null;\n        this.slides = [];\n        this.currentSlide = -1;\n        this.sliding = false;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$interval = $interval;\n        this.Carousel = Carousel;\n        this.$element.on('keydown', (e) => {\n            if (!this.keyboard\n                || (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight')\n                || /input|textarea/i.test(e.target.tagName)) {\n                return;\n            }\n            if (e.key === 'ArrowLeft') {\n                this.prevNextSlide(false);\n            }\n            else {\n                this.prevNextSlide(true);\n            }\n            $scope.$digest();\n            e.preventDefault();\n        });\n    }\n    $onInit() {\n        const interval = 'interval' in this.$attrs ? parseInt(this.$attrs['interval']) : this.Carousel.interval, pause = 'pause' in this.$attrs ? this.$attrs['pause'] === 'hover' : this.Carousel.pause;\n        if (interval) {\n            const cycle = () => {\n                this.carouselInterval = this.$interval(() => {\n                    this.prevNextSlide(true);\n                }, interval);\n            };\n            if (pause) {\n                this.$element.on('mouseenter', () => {\n                    this.$interval.cancel(this.carouselInterval);\n                });\n                this.$element.on('mouseleave', cycle);\n            }\n            cycle();\n        }\n    }\n    $onChanges() {\n        if (angular.isUndefined(this.wrap)) {\n            this.wrap = this.Carousel.wrap;\n        }\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Carousel.keyboard;\n        }\n    }\n    $onDestroy() {\n        if (this.carouselInterval !== null) {\n            this.$interval.cancel(this.carouselInterval);\n        }\n    }\n    register($element) {\n        this.slides.push($element);\n        if ($element.hasClass('active')) {\n            if (~this.currentSlide) {\n                this.slides[this.currentSlide].removeClass('active');\n            }\n            this.currentSlide = this.slides.length - 1;\n        }\n        else if (!~this.currentSlide) {\n            $element.addClass('active');\n            this.currentSlide = this.slides.length - 1;\n        }\n    }\n    unregister($element) {\n        this.slides.splice(this.slides.indexOf($element, 1));\n    }\n    prevNextSlide(isNext) {\n        const nextIndex = isNext ? this.currentSlide + 1 : this.currentSlide - 1;\n        if ((nextIndex >= this.slides.length || nextIndex < 0)\n            && !this.wrap) {\n            return;\n        }\n        this.slideTo(nextIndex, isNext ? 'left' : 'right');\n    }\n    slideTo(index, direction) {\n        if (index < 0) {\n            index = this.slides.length - 1;\n        }\n        else if (index >= this.slides.length) {\n            index = 0;\n        }\n        this.changeSlide(index, direction);\n    }\n    changeSlide(nextSlide, direction) {\n        if (nextSlide !== this.currentSlide && !this.sliding) {\n            this.sliding = true;\n            if (angular.isUndefined(direction)) {\n                direction = nextSlide > this.currentSlide ? 'left' : 'right';\n            }\n            const next = this.slides[nextSlide], active = this.slides[this.currentSlide], transition = () => {\n                active[0].removeEventListener('transitionend', transition);\n                next.removeClass('carousel-item-next carousel-item-prev carousel-item-' + direction)\n                    .addClass('active');\n                active.removeClass('active carousel-item-' + direction);\n                this.sliding = false;\n            };\n            next.addClass(direction === 'left' ? 'carousel-item-next' : 'carousel-item-prev');\n            next[0].offsetWidth; // force reflow\n            active.addClass('carousel-item-' + direction);\n            next.addClass('carousel-item-' + direction);\n            active[0].addEventListener('transitionend', transition);\n            this.currentSlide = nextSlide;\n        }\n    }\n}\nexport function bsCarouselDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsCarousel\n     *\n     * @param interval\n     * @param pause\n     * @param {expression|boolean} wrap\n     * @param {expression|boolean} keyboard\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            wrap: '<?',\n            keyboard: '<?'\n        },\n        controller: BsCarouselDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {CarouselProvider} from './carousel.provider';\nimport {bsCarouselIndicatorsComponent} from './bs-carousel-indicators.component';\nimport {bsCarouselItemDirective} from './bs-carousel-item.directive';\nimport {bsCarouselNavDirective} from './bs-carousel-nav.directive';\nimport {bsCarouselDirective} from './bs-carousel.directive';\n\nconst carouselModule = angular.module('angularBS.carousel', [])\n    .provider('Carousel', CarouselProvider)\n    .component('bsCarouselIndicators', bsCarouselIndicatorsComponent)\n    .directive('bsCarouselItem', bsCarouselItemDirective)\n    .directive('bsCarouselNav', bsCarouselNavDirective)\n    .directive('bsCarousel', bsCarouselDirective);\n\nexport const angularBSCarousel = carouselModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { CarouselProvider } from './carousel.provider';\nimport { bsCarouselIndicatorsComponent } from './bs-carousel-indicators.component';\nimport { bsCarouselItemDirective } from './bs-carousel-item.directive';\nimport { bsCarouselNavDirective } from './bs-carousel-nav.directive';\nimport { bsCarouselDirective } from './bs-carousel.directive';\nconst carouselModule = angular.module('angularBS.carousel', [])\n    .provider('Carousel', CarouselProvider)\n    .component('bsCarouselIndicators', bsCarouselIndicatorsComponent)\n    .directive('bsCarouselItem', bsCarouselItemDirective)\n    .directive('bsCarouselNav', bsCarouselNavDirective)\n    .directive('bsCarousel', bsCarouselDirective);\nexport const angularBSCarousel = carouselModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface ICarouselOptions {\n    interval: number,\n    pause: 'hover' | null,\n    wrap: boolean,\n    keyboard: boolean\n}\n\nexport class CarouselProvider {\n    public config: ICarouselOptions = {\n        interval: 5000,\n        pause: 'hover',\n        wrap: true,\n        keyboard: true\n    };\n\n    $get(): ICarouselOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class CarouselProvider {\n    constructor() {\n        this.config = {\n            interval: 5000,\n            pause: 'hover',\n            wrap: true,\n            keyboard: true\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\nimport {BsCollapseDirectiveController} from './bs-collapse.directive';\n\n/**\n * @ngInject\n */\nexport class BsCollapseGroupDirectiveController {\n    private children = [];\n\n    register(bsCollapseCtrl: BsCollapseDirectiveController): void {\n        this.children.push(bsCollapseCtrl);\n    }\n\n    unregister(bsCollapseCtrl: BsCollapseDirectiveController): void {\n        this.children.splice(this.children.indexOf(bsCollapseCtrl), 1);\n    }\n\n    expand(invokingCtrl: BsCollapseDirectiveController): void {\n        for (let c = 0; c < this.children.length; c++) {\n            if (this.children[c] !== invokingCtrl) {\n                this.children[c].bsCollapse = true;\n            }\n        }\n    }\n}\n\nexport function bsCollapseGroupDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsCollapseGroupDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n/**\n * @ngInject\n */\nexport class BsCollapseGroupDirectiveController {\n    constructor() {\n        this.children = [];\n    }\n    register(bsCollapseCtrl) {\n        this.children.push(bsCollapseCtrl);\n    }\n    unregister(bsCollapseCtrl) {\n        this.children.splice(this.children.indexOf(bsCollapseCtrl), 1);\n    }\n    expand(invokingCtrl) {\n        for (let c = 0; c < this.children.length; c++) {\n            if (this.children[c] !== invokingCtrl) {\n                this.children[c].bsCollapse = true;\n            }\n        }\n    }\n}\nexport function bsCollapseGroupDirective() {\n    return {\n        restrict: 'A',\n        controller: BsCollapseGroupDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective, IScope} from 'angular';\nimport * as angular from 'angular';\nimport 'angular-animate';\nimport {BsCollapseGroupDirectiveController} from './bs-collapse-group.directive';\n\n/**\n * @ngInject\n */\nexport class BsCollapseDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private readonly $animateCss: angular.animate.IAnimateCssService;\n    private bsCollapse: boolean;\n    private group: BsCollapseGroupDirectiveController;\n\n    constructor($scope: IScope, $element: JQLite, $animateCss: angular.animate.IAnimateCssService) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$animateCss = $animateCss;\n\n        $scope.$watch(() => {\n            return this.bsCollapse;\n        }, (nV) => {\n            this.bsCollapse = !!nV;\n            if (this.bsCollapse) {\n                this.collapse();\n            } else {\n                this.expand();\n                if (this.group) {\n                    this.group.expand(this);\n                }\n            }\n        })\n    }\n\n    $onInit(): void {\n        if (this.bsCollapse) {\n            this.$element.removeClass('show collapsing').addClass('collapse');\n            this.$element.css({height: null});\n        } else {\n            this.$element.removeClass('collapsing').addClass('collapse show');\n        }\n    }\n\n\n    private expand(): void {\n        if (!this.$element.hasClass('show')) {\n            this.$element.removeClass('collapse').addClass('collapsing');\n            if (this.$animateCss) {\n                this.$animateCss(this.$element, {\n                    addClass: 'show',\n                    easing: 'ease',\n                    to: {\n                        height: this.$element[0].scrollHeight + 'px'\n                    }\n                }).start()['finally'](() => {\n                    this.$element.removeClass('collapsing').addClass('collapse').css({height: 'auto'});\n                });\n            }\n        }\n    }\n    private collapse(): void {\n        if (this.$element.hasClass('show')) {\n            this.$element.css({\n                height: this.$element[0].scrollHeight + 'px'\n            }).removeClass('collapse').addClass('collapsing');\n            this.$animateCss(this.$element, {\n                removeClass: 'show',\n                to: {height: '0'}\n            }).start()['finally'](() => {\n                this.$element.css({height: null});\n                this.$element.removeClass('collapsing').addClass('collapse');\n            });\n        }\n    }\n}\n\nexport function bsCollapseDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsCollapse\n     *\n     * @param {expression|boolean} bsCollapse\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsCollapse: '=?'\n        },\n        require: ['bsCollapse', '?^bsCollapseGroup'],\n        link: function(scope, element, attrs, ctrl) {\n            if (ctrl[1] !== null) {\n                ctrl[1].register(ctrl[0]);\n                ctrl[0].group = ctrl[1];\n                scope.$on('destroy', () => {\n                    ctrl[1].unregister(ctrl[0]);\n                });\n            }\n        },\n        controller: BsCollapseDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport 'angular-animate';\n/**\n * @ngInject\n */\nexport class BsCollapseDirectiveController {\n    constructor($scope, $element, $animateCss) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$animateCss = $animateCss;\n        $scope.$watch(() => {\n            return this.bsCollapse;\n        }, (nV) => {\n            this.bsCollapse = !!nV;\n            if (this.bsCollapse) {\n                this.collapse();\n            }\n            else {\n                this.expand();\n                if (this.group) {\n                    this.group.expand(this);\n                }\n            }\n        });\n    }\n    $onInit() {\n        if (this.bsCollapse) {\n            this.$element.removeClass('show collapsing').addClass('collapse');\n            this.$element.css({ height: null });\n        }\n        else {\n            this.$element.removeClass('collapsing').addClass('collapse show');\n        }\n    }\n    expand() {\n        if (!this.$element.hasClass('show')) {\n            this.$element.removeClass('collapse').addClass('collapsing');\n            if (this.$animateCss) {\n                this.$animateCss(this.$element, {\n                    addClass: 'show',\n                    easing: 'ease',\n                    to: {\n                        height: this.$element[0].scrollHeight + 'px'\n                    }\n                }).start()['finally'](() => {\n                    this.$element.removeClass('collapsing').addClass('collapse').css({ height: 'auto' });\n                });\n            }\n        }\n    }\n    collapse() {\n        if (this.$element.hasClass('show')) {\n            this.$element.css({\n                height: this.$element[0].scrollHeight + 'px'\n            }).removeClass('collapse').addClass('collapsing');\n            this.$animateCss(this.$element, {\n                removeClass: 'show',\n                to: { height: '0' }\n            }).start()['finally'](() => {\n                this.$element.css({ height: null });\n                this.$element.removeClass('collapsing').addClass('collapse');\n            });\n        }\n    }\n}\nexport function bsCollapseDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsCollapse\n     *\n     * @param {expression|boolean} bsCollapse\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsCollapse: '=?'\n        },\n        require: ['bsCollapse', '?^bsCollapseGroup'],\n        link: function (scope, element, attrs, ctrl) {\n            if (ctrl[1] !== null) {\n                ctrl[1].register(ctrl[0]);\n                ctrl[0].group = ctrl[1];\n                scope.$on('destroy', () => {\n                    ctrl[1].unregister(ctrl[0]);\n                });\n            }\n        },\n        controller: BsCollapseDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {bsCollapseDirective} from './bs-collapse.directive';\nimport {bsCollapseGroupDirective} from './bs-collapse-group.directive';\n\nconst collapseModule = angular.module('angularBS.collapse', [])\n    .directive('bsCollapse', bsCollapseDirective)\n    .directive('bsCollapseGroup', bsCollapseGroupDirective);\n\nexport const angularBSCollapse = collapseModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { bsCollapseDirective } from './bs-collapse.directive';\nimport { bsCollapseGroupDirective } from './bs-collapse-group.directive';\nconst collapseModule = angular.module('angularBS.collapse', [])\n    .directive('bsCollapse', bsCollapseDirective)\n    .directive('bsCollapseGroup', bsCollapseGroupDirective);\nexport const angularBSCollapse = collapseModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nexport class BsDropdownBoundaryDirectiveController {\n    public $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsDropdownBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsDropdownBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nexport class BsDropdownBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsDropdownBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsDropdownBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\n\nexport function bsDropdownToggleDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsDropdown',\n        link: function(scope, element, attrs, dropdownCtrl) {\n            element.on('click', () => {\n                scope.$apply(() => {\n                    dropdownCtrl.bsDropdown = !dropdownCtrl.bsDropdown;\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport function bsDropdownToggleDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsDropdown',\n        link: function (scope, element, attrs, dropdownCtrl) {\n            element.on('click', () => {\n                scope.$apply(() => {\n                    dropdownCtrl.bsDropdown = !dropdownCtrl.bsDropdown;\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective, IDocumentService, IScope} from 'angular';\nimport {AngularBSService} from '../helpers/angularBS.service';\nimport {BsDropdownBoundaryDirectiveController} from './bs-dropdown-boundary.directive';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BSDropdownDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $document: IDocumentService;\n    private angularBS: AngularBSService;\n    private bsDropdown: boolean;\n    private _bsDropdown: boolean;\n    private boundary: BsDropdownBoundaryDirectiveController;\n    private boundaryElement: JQLite;\n\n    constructor($scope: IScope, $element: JQLite, $document: IDocumentService, angularBS: AngularBSService) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$document = $document;\n        this.angularBS = angularBS;\n    }\n\n    $onInit(): void {\n        this.bsDropdown = !!this.bsDropdown;\n        this.$element.addClass('dropdown');\n        this.$document.on('click', this._onClick.bind(this));\n        this.$element.on('keydown', this._keydown.bind(this));\n    }\n\n    $doCheck(): void {\n        if (this._bsDropdown !== this.bsDropdown) {\n            this._bsDropdown = this.bsDropdown;\n            if (this.bsDropdown) {\n                this.$element.addClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).addClass('show');\n                if (this.boundary || this.boundaryElement) {\n                    this.reposition();\n                }\n            } else {\n                if (this.boundary || this.boundaryElement) {\n                    this.$element.removeClass('dropup');\n                }\n                this.$element.removeClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).removeClass('show');\n            }\n        }\n    }\n\n    $onDestroy(): void {\n        this.$document.off('click', this._onClick.bind(this));\n        this.$element.off('keydown', this._keydown.bind(this));\n    }\n\n    _onClick(e: JQueryMouseEventObject): void {\n        if (this.bsDropdown && !this.$element[0].contains(e.target)) {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n        }\n    }\n\n    _keydown(e: JQueryKeyEventObject): void {\n        if (this.bsDropdown && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n            return;\n        }\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            const items = this.$element[0].querySelectorAll<HTMLAnchorElement>(\n                '.dropdown-menu a:not(.disabled)'\n            );\n            let idx = -1;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].contains(e.target)) {\n                    idx = i;\n                    break;\n                }\n            }\n            if (e.key === 'ArrowUp' && idx > 0) {\n                idx--;\n            } else if (e.key === 'ArrowDown' && idx < items.length - 1) {\n                idx++;\n            }\n            if (!~idx) {\n                idx = 0;\n            }\n            items[idx].focus();\n        }\n    }\n\n    reposition(): void {\n        const boundaryElement = this.boundary ? this.boundary.$element[0] : this.boundaryElement[0],\n            boundaryOffset = this.angularBS.offset(boundaryElement),\n            menuOffset = this.angularBS.offset(this.$element[0].querySelector('.dropdown-menu'));\n        if (menuOffset.height + menuOffset.top > boundaryOffset.height + boundaryOffset.top) {\n            this.$element.addClass('dropup');\n        } else {\n            this.$element.removeClass('dropup');\n        }\n    }\n}\n\nexport function bsDropdownDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsDropdown\n     * @property {expression|boolean} bsDropdown\n     */\n    return {\n        restrict: 'A',\n        require: {\n            boundary: '?^bsDropdownBoundary'\n        },\n        bindToController: {\n            bsDropdown: '=?',\n            boundaryElement: '<?'\n        },\n        controller: BSDropdownDirectiveController\n    };\n}\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BSDropdownDirectiveController {\n    constructor($scope, $element, $document, angularBS) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$document = $document;\n        this.angularBS = angularBS;\n    }\n    $onInit() {\n        this.bsDropdown = !!this.bsDropdown;\n        this.$element.addClass('dropdown');\n        this.$document.on('click', this._onClick.bind(this));\n        this.$element.on('keydown', this._keydown.bind(this));\n    }\n    $doCheck() {\n        if (this._bsDropdown !== this.bsDropdown) {\n            this._bsDropdown = this.bsDropdown;\n            if (this.bsDropdown) {\n                this.$element.addClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).addClass('show');\n                if (this.boundary || this.boundaryElement) {\n                    this.reposition();\n                }\n            }\n            else {\n                if (this.boundary || this.boundaryElement) {\n                    this.$element.removeClass('dropup');\n                }\n                this.$element.removeClass('show');\n                angular.element(this.$element[0].querySelectorAll('.dropdown-menu')).removeClass('show');\n            }\n        }\n    }\n    $onDestroy() {\n        this.$document.off('click', this._onClick.bind(this));\n        this.$element.off('keydown', this._keydown.bind(this));\n    }\n    _onClick(e) {\n        if (this.bsDropdown && !this.$element[0].contains(e.target)) {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n        }\n    }\n    _keydown(e) {\n        if (this.bsDropdown && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.bsDropdown = false;\n            });\n            return;\n        }\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            const items = this.$element[0].querySelectorAll('.dropdown-menu a:not(.disabled)');\n            let idx = -1;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].contains(e.target)) {\n                    idx = i;\n                    break;\n                }\n            }\n            if (e.key === 'ArrowUp' && idx > 0) {\n                idx--;\n            }\n            else if (e.key === 'ArrowDown' && idx < items.length - 1) {\n                idx++;\n            }\n            if (!~idx) {\n                idx = 0;\n            }\n            items[idx].focus();\n        }\n    }\n    reposition() {\n        const boundaryElement = this.boundary ? this.boundary.$element[0] : this.boundaryElement[0], boundaryOffset = this.angularBS.offset(boundaryElement), menuOffset = this.angularBS.offset(this.$element[0].querySelector('.dropdown-menu'));\n        if (menuOffset.height + menuOffset.top > boundaryOffset.height + boundaryOffset.top) {\n            this.$element.addClass('dropup');\n        }\n        else {\n            this.$element.removeClass('dropup');\n        }\n    }\n}\nexport function bsDropdownDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsDropdown\n     * @property {expression|boolean} bsDropdown\n     */\n    return {\n        restrict: 'A',\n        require: {\n            boundary: '?^bsDropdownBoundary'\n        },\n        bindToController: {\n            bsDropdown: '=?',\n            boundaryElement: '<?'\n        },\n        controller: BSDropdownDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {helpers} from '../helpers/helpers.module';\nimport {bsDropdownBoundaryDirective} from './bs-dropdown-boundary.directive';\nimport {bsDropdownDirective} from './bs-dropdown.directive';\nimport {bsDropdownToggleDirective} from './bs-dropdown-toggle.directive';\n\nconst dropdownModule = angular.module('angularBS.dropdown', [helpers])\n    .directive('bsDropdownBoundary', bsDropdownBoundaryDirective)\n    .directive('bsDropdown', bsDropdownDirective)\n    .directive('bsDropdownToggle', bsDropdownToggleDirective);\n\nexport const angularBSDropdown = dropdownModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { helpers } from '../helpers/helpers.module';\nimport { bsDropdownBoundaryDirective } from './bs-dropdown-boundary.directive';\nimport { bsDropdownDirective } from './bs-dropdown.directive';\nimport { bsDropdownToggleDirective } from './bs-dropdown-toggle.directive';\nconst dropdownModule = angular.module('angularBS.dropdown', [helpers])\n    .directive('bsDropdownBoundary', bsDropdownBoundaryDirective)\n    .directive('bsDropdown', bsDropdownDirective)\n    .directive('bsDropdownToggle', bsDropdownToggleDirective);\nexport const angularBSDropdown = dropdownModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport * as angular from 'angular';\n\nexport interface IElementOffset {\n    width: number,\n    height: number,\n    top: number,\n    left: number\n}\n\nexport type placement = 'top' | 'left' | 'right' | 'bottom' | string;\n\nexport class AngularBSService {\n    /**\n     * Get element width, height, position from top and left of document/window,\n     */\n    offset(element: HTMLElement): IElementOffset {\n        const elemBCR = element.getBoundingClientRect(),\n            elemStyle = element['currentStyle'] || window.getComputedStyle(element);\n        return {\n            width: Math.ceil(angular.isNumber(elemBCR.width) ? elemBCR.width : element.offsetWidth)\n                + parseInt(elemStyle.getPropertyValue('margin-left'))\n                + parseInt(elemStyle.getPropertyValue('margin-right')),\n            height: Math.ceil(angular.isNumber(elemBCR.height) ? elemBCR.height : element.offsetHeight)\n                + parseInt(elemStyle.getPropertyValue('margin-top'))\n                + parseInt(elemStyle.getPropertyValue('margin-bottom')),\n            top: Math.ceil(elemBCR.top + (window.pageYOffset || document.documentElement.scrollTop)),\n            left: Math.ceil(elemBCR.left + (window.pageXOffset || document.documentElement.scrollLeft)),\n        };\n    }\n\n    /**\n     * Removes all placement classes on given element\n     */\n    setPlacementCSS(element: JQLite, prefix: string, placement: placement): void {\n        const placements = ['top', 'left', 'right', 'bottom'];\n        for (let p = 0; p < placements.length; p++) {\n            element.removeClass(prefix + placements[p]);\n        }\n        element.addClass(prefix + placement);\n    }\n\n    /**\n     * Position element aside of positionTo on given side (placement)\n     * @param element\n     * @param positionTo\n     * @param placement\n     * @param [boundaryElement] - defaults to document|window\n     * @param cssPrefix\n     * @returns {{top: number, left: number, position: string}}\n     */\n    positionElement(\n        element: JQLite,\n        positionTo: JQLite,\n        placement: placement,\n        boundaryElement?: JQLite,\n        cssPrefix?: string\n    ): void {\n        const splitPlacement = placement.split(' ');\n        let top = 0, left = 0,\n            arrowTop = '50%',\n            realPlacement: placement = 'left',\n            offset = this.offset(element[0]);\n        const offsetTo = this.offset(positionTo[0]),\n            placements: placement[] = ['right', 'top', 'bottom'],\n            auto = !!~splitPlacement.indexOf('auto'),\n            calcPosition = () => {\n                switch (realPlacement) {\n                    case 'bottom':\n                        top = (offsetTo.top + offsetTo.height);\n                        left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                        break;\n                    case 'top':\n                        top = (offsetTo.top - offset.height);\n                        left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                        break;\n                    case 'left':\n                        top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                        left = (offsetTo.left - offset.width);\n                        break;\n                    case 'right':\n                        top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                        left = (offsetTo.left + offsetTo.width);\n                        break;\n                }\n                this.setPlacementCSS(element, cssPrefix, realPlacement);\n                // check to see if element has been resized after adding the placement\n                const newOffset = this.offset(element[0]);\n                if (newOffset.height !== offset.height || newOffset.width !== offset.width) {\n                    offset = newOffset;\n                    calcPosition();\n                }\n            };\n        for (let p = 0; p < placements.length; p++) {\n            if (~splitPlacement.indexOf(placements[p])) {\n                realPlacement = placements[p];\n                break;\n            }\n        }\n        calcPosition();\n        // get boundary offset\n        const bo = angular.isDefined(boundaryElement) ? this.offset(boundaryElement[0]) : {\n            top: window.pageYOffset || document.documentElement.scrollTop,\n            left: 0,\n            width: Math.max(window.innerWidth, document.body.clientWidth),\n            height: Math.max(window.innerHeight, document.body.clientHeight)\n        };\n        // change side if element would be outside of given viewport\n        if (auto) {\n            let newPlacement = realPlacement;\n            switch (realPlacement) {\n                case 'left':\n                    if (left < bo.left) {\n                        newPlacement = 'right';\n                    }\n                    break;\n                case 'right':\n                    if (left + offset.width + 10 > bo.left + bo.width) {\n                        newPlacement = 'left';\n                    }\n                    break;\n                case 'bottom':\n                    if (top + offset.height + 10 > bo.top + bo.height) {\n                        newPlacement = 'top';\n                    }\n                    break;\n                case 'top':\n                    if (top < bo.top) {\n                        newPlacement = 'bottom';\n                    }\n                    break;\n            }\n            if (newPlacement !== realPlacement) {\n                realPlacement = newPlacement;\n                calcPosition();\n            }\n        }\n        // adjust arrow position\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (realPlacement) {\n                case 'left':\n                case 'right':\n                    if (top < bo.top) {\n                        top = bo.top;\n                        arrowTop = (offsetTo.top + offsetTo.height / 2) + 'px';\n                    } else if (top + offset.height > bo.top + bo.height) {\n                        top = bo.top + bo.height - offset.height;\n                        let arrowTopN = offsetTo.top + offsetTo.height / 2 - top;\n                        if (arrowTopN > offset.height - 15) {\n                            arrowTopN = offset.height - 15;\n                        }\n                        arrowTop = arrowTopN + 'px';\n                    }\n                    arrow.css('top', arrowTop);\n                    break;\n                case 'bottom':\n                    arrow.css('top', '');\n                    break;\n                case 'top':\n                    arrow.css('top', 'auto');\n                    break;\n            }\n        }\n        this.adjustArrow(element, realPlacement);\n        // apply element position\n        element.css({\n            top: '0px',\n            left: '0px',\n            transform: 'translate3d(' + left + 'px, ' + top + 'px, 0px)'\n        });\n    }\n\n    /**\n     * Properly set arrow position of tooltip/popover element\n     */\n    adjustArrow(element: JQLite, placement: placement): void {\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (placement) {\n                case 'top':\n                case 'bottom':\n                    arrow.css('left', 'calc(50% - ' + (this.offset(arrow[0]).width / 2 + 'px)'));\n                    break;\n                case 'left':\n                case 'right':\n                    arrow.css('top', 'calc(50% - ' + (this.offset(arrow[0]).height / 2 + 'px)'));\n                    break;\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nexport class AngularBSService {\n    /**\n     * Get element width, height, position from top and left of document/window,\n     */\n    offset(element) {\n        const elemBCR = element.getBoundingClientRect(), elemStyle = element['currentStyle'] || window.getComputedStyle(element);\n        return {\n            width: Math.ceil(angular.isNumber(elemBCR.width) ? elemBCR.width : element.offsetWidth)\n                + parseInt(elemStyle.getPropertyValue('margin-left'))\n                + parseInt(elemStyle.getPropertyValue('margin-right')),\n            height: Math.ceil(angular.isNumber(elemBCR.height) ? elemBCR.height : element.offsetHeight)\n                + parseInt(elemStyle.getPropertyValue('margin-top'))\n                + parseInt(elemStyle.getPropertyValue('margin-bottom')),\n            top: Math.ceil(elemBCR.top + (window.pageYOffset || document.documentElement.scrollTop)),\n            left: Math.ceil(elemBCR.left + (window.pageXOffset || document.documentElement.scrollLeft)),\n        };\n    }\n    /**\n     * Removes all placement classes on given element\n     */\n    setPlacementCSS(element, prefix, placement) {\n        const placements = ['top', 'left', 'right', 'bottom'];\n        for (let p = 0; p < placements.length; p++) {\n            element.removeClass(prefix + placements[p]);\n        }\n        element.addClass(prefix + placement);\n    }\n    /**\n     * Position element aside of positionTo on given side (placement)\n     * @param element\n     * @param positionTo\n     * @param placement\n     * @param [boundaryElement] - defaults to document|window\n     * @param cssPrefix\n     * @returns {{top: number, left: number, position: string}}\n     */\n    positionElement(element, positionTo, placement, boundaryElement, cssPrefix) {\n        const splitPlacement = placement.split(' ');\n        let top = 0, left = 0, arrowTop = '50%', realPlacement = 'left', offset = this.offset(element[0]);\n        const offsetTo = this.offset(positionTo[0]), placements = ['right', 'top', 'bottom'], auto = !!~splitPlacement.indexOf('auto'), calcPosition = () => {\n            switch (realPlacement) {\n                case 'bottom':\n                    top = (offsetTo.top + offsetTo.height);\n                    left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                    break;\n                case 'top':\n                    top = (offsetTo.top - offset.height);\n                    left = ((offsetTo.left + (offsetTo.width / 2)) - (offset.width / 2));\n                    break;\n                case 'left':\n                    top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                    left = (offsetTo.left - offset.width);\n                    break;\n                case 'right':\n                    top = (offsetTo.top + ((offsetTo.height - offset.height) / 2));\n                    left = (offsetTo.left + offsetTo.width);\n                    break;\n            }\n            this.setPlacementCSS(element, cssPrefix, realPlacement);\n            // check to see if element has been resized after adding the placement\n            const newOffset = this.offset(element[0]);\n            if (newOffset.height !== offset.height || newOffset.width !== offset.width) {\n                offset = newOffset;\n                calcPosition();\n            }\n        };\n        for (let p = 0; p < placements.length; p++) {\n            if (~splitPlacement.indexOf(placements[p])) {\n                realPlacement = placements[p];\n                break;\n            }\n        }\n        calcPosition();\n        // get boundary offset\n        const bo = angular.isDefined(boundaryElement) ? this.offset(boundaryElement[0]) : {\n            top: window.pageYOffset || document.documentElement.scrollTop,\n            left: 0,\n            width: Math.max(window.innerWidth, document.body.clientWidth),\n            height: Math.max(window.innerHeight, document.body.clientHeight)\n        };\n        // change side if element would be outside of given viewport\n        if (auto) {\n            let newPlacement = realPlacement;\n            switch (realPlacement) {\n                case 'left':\n                    if (left < bo.left) {\n                        newPlacement = 'right';\n                    }\n                    break;\n                case 'right':\n                    if (left + offset.width + 10 > bo.left + bo.width) {\n                        newPlacement = 'left';\n                    }\n                    break;\n                case 'bottom':\n                    if (top + offset.height + 10 > bo.top + bo.height) {\n                        newPlacement = 'top';\n                    }\n                    break;\n                case 'top':\n                    if (top < bo.top) {\n                        newPlacement = 'bottom';\n                    }\n                    break;\n            }\n            if (newPlacement !== realPlacement) {\n                realPlacement = newPlacement;\n                calcPosition();\n            }\n        }\n        // adjust arrow position\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (realPlacement) {\n                case 'left':\n                case 'right':\n                    if (top < bo.top) {\n                        top = bo.top;\n                        arrowTop = (offsetTo.top + offsetTo.height / 2) + 'px';\n                    }\n                    else if (top + offset.height > bo.top + bo.height) {\n                        top = bo.top + bo.height - offset.height;\n                        let arrowTopN = offsetTo.top + offsetTo.height / 2 - top;\n                        if (arrowTopN > offset.height - 15) {\n                            arrowTopN = offset.height - 15;\n                        }\n                        arrowTop = arrowTopN + 'px';\n                    }\n                    arrow.css('top', arrowTop);\n                    break;\n                case 'bottom':\n                    arrow.css('top', '');\n                    break;\n                case 'top':\n                    arrow.css('top', 'auto');\n                    break;\n            }\n        }\n        this.adjustArrow(element, realPlacement);\n        // apply element position\n        element.css({\n            top: '0px',\n            left: '0px',\n            transform: 'translate3d(' + left + 'px, ' + top + 'px, 0px)'\n        });\n    }\n    /**\n     * Properly set arrow position of tooltip/popover element\n     */\n    adjustArrow(element, placement) {\n        const arrow = angular.element(element[0].querySelector('.arrow'));\n        if (angular.isDefined(arrow)) {\n            switch (placement) {\n                case 'top':\n                case 'bottom':\n                    arrow.css('left', 'calc(50% - ' + (this.offset(arrow[0]).width / 2 + 'px)'));\n                    break;\n                case 'left':\n                case 'right':\n                    arrow.css('top', 'calc(50% - ' + (this.offset(arrow[0]).height / 2 + 'px)'));\n                    break;\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {AngularBSService} from './angularBS.service';\n\nconst helpersModule = angular.module('angularBS.helpers', [])\n    .factory('angularBS', AngularBSService);\n\nexport const helpers = helpersModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { AngularBSService } from './angularBS.service';\nconst helpersModule = angular.module('angularBS.helpers', [])\n    .factory('angularBS', AngularBSService);\nexport const helpers = helpersModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IComponentOptions, IPromise, IQService, ITimeoutService} from 'angular';\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\n\nexport class BSModalBackdropController {\n    private $element: JQLite;\n    private $q: IQService;\n    private readonly $timeout: ITimeoutService;\n    private ModalBackdrop: ModalBackdropFactory;\n    private isAnimated: () => boolean;\n    /**\n     * @ngInject\n     */\n    constructor($element: JQLite, $q: IQService, $timeout: ITimeoutService, ModalBackdrop: ModalBackdropFactory) {\n        this.$element = $element;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n\n    $onInit(): void {\n        this.ModalBackdrop.backdropController = this;\n        this.isAnimated = this.ModalBackdrop.isAnimated.bind(this.ModalBackdrop);\n    }\n\n    $postLink(): void {\n        // wait until 'fade' class is added, we don't use $timeout cause we don't need a digest cycle here\n        setTimeout(() => {\n            this.$element.children()[0].offsetWidth; // force reflow\n            this.$element.children().addClass('show');\n            this.ModalBackdrop.shown();\n        });\n    }\n\n    hide(): IPromise<void> {\n        const defered = this.$q.defer<void>(),\n            backdropElement = this.$element.children();\n        backdropElement.removeClass('show');\n        if (this.isAnimated()) {\n            let transitionFinished = false;\n            const transition = function() {\n                if (!transitionFinished) {\n                    defered.resolve();\n                    transitionFinished = true;\n                }\n            };\n            backdropElement[0].addEventListener('transitionend', transition);\n            this.$timeout(transition, 150);\n        } else {\n            defered.resolve();\n        }\n        return defered.promise;\n    }\n}\n\nexport const bsModalBackdropComponent: IComponentOptions = {\n    template: '<div class=\"modal-backdrop\" ng-class=\"{\\'fade\\': vm.isAnimated()}\"></div>',\n    controllerAs: 'vm',\n    controller: BSModalBackdropController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class BSModalBackdropController {\n    /**\n     * @ngInject\n     */\n    constructor($element, $q, $timeout, ModalBackdrop) {\n        this.$element = $element;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n    $onInit() {\n        this.ModalBackdrop.backdropController = this;\n        this.isAnimated = this.ModalBackdrop.isAnimated.bind(this.ModalBackdrop);\n    }\n    $postLink() {\n        // wait until 'fade' class is added, we don't use $timeout cause we don't need a digest cycle here\n        setTimeout(() => {\n            this.$element.children()[0].offsetWidth; // force reflow\n            this.$element.children().addClass('show');\n            this.ModalBackdrop.shown();\n        });\n    }\n    hide() {\n        const defered = this.$q.defer(), backdropElement = this.$element.children();\n        backdropElement.removeClass('show');\n        if (this.isAnimated()) {\n            let transitionFinished = false;\n            const transition = function () {\n                if (!transitionFinished) {\n                    defered.resolve();\n                    transitionFinished = true;\n                }\n            };\n            backdropElement[0].addEventListener('transitionend', transition);\n            this.$timeout(transition, 150);\n        }\n        else {\n            defered.resolve();\n        }\n        return defered.promise;\n    }\n}\nexport const bsModalBackdropComponent = {\n    template: '<div class=\"modal-backdrop\" ng-class=\"{\\'fade\\': vm.isAnimated()}\"></div>',\n    controllerAs: 'vm',\n    controller: BSModalBackdropController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IDirective, IDocumentService, IScope, ITimeoutService} from 'angular';\nimport IInjectorService = angular.auto.IInjectorService;\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\nimport {ModalProvider} from './modal.provider';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport class BSModalController {\n    private readonly $timeout: ITimeoutService;\n    private $document: IDocumentService;\n    private $injector: IInjectorService;\n    private Modal: ModalProvider;\n    private ModalBackdrop: ModalBackdropFactory;\n    private _keydownHandler: (JQueryEventObject) => void;\n    private _bsModal: boolean;\n    private onBeforeChange: () => boolean;\n    public $scope: IScope;\n    public $element: JQLite;\n    public backdrop: 'static' | boolean;\n    public keyboard: boolean;\n    public bsModal: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $timeout: ITimeoutService,\n        $document: IDocumentService,\n        $injector: IInjectorService,\n        Modal: ModalProvider,\n        ModalBackdrop: ModalBackdropFactory\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$injector = $injector;\n        this.Modal = Modal;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n\n\n    $onInit(): void {\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Modal.config.keyboard;\n        }\n        if (angular.isUndefined(this.backdrop)) {\n            this.backdrop = this.Modal.config.backdrop;\n        }\n        // backdrop click\n        this.$element.on('click', (e) => {\n            if (window.getSelection().type === 'Range') {\n                return;\n            }\n            if (this.backdrop === true && e.target === this.$element[0]) { // .modal covers whole page\n                this.$scope.$apply(() => {\n                    this.hide();\n                });\n            }\n        });\n        // keyboard esc\n        this._keydownHandler = (e) => this._onKeydown(e);\n        this.$document.on('keydown', this._keydownHandler);\n    }\n\n    $doCheck(): void {\n        if (this._bsModal !== this.bsModal) {\n            this._bsModal = this.bsModal;\n            if (this.bsModal) {\n                this._doShow();\n            } else {\n                this._doHide();\n            }\n        }\n    }\n\n    $onDestroy(): void {\n        if (this.bsModal) {\n            this._doHide();\n        }\n        this.$document.off('keydown', this._keydownHandler);\n    }\n\n    _onKeydown(e: JQueryKeyEventObject): void {\n        if (this.keyboard && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.hide();\n            });\n        }\n    }\n\n    _doShow(): void {\n        if (!this.$element.hasClass('show')) {\n            this.$element.css({display: 'block'});\n            this.$element[0].offsetWidth; // force reflow\n            this.ModalBackdrop\n                .show(!!this.backdrop, this.$element.hasClass('fade'))\n                .then(() => {\n                    this.$element.addClass('show');\n                });\n        }\n    }\n\n    _doHide(): void {\n        if (this.$element.hasClass('show')) {\n            this.$element.removeClass('show');\n            let transitionEnded = false;\n            const callback = () => {\n                    this.ModalBackdrop.hide();\n                    this.$element.css({display: ''});\n                },\n                transition = () => {\n                    if (!transitionEnded) {\n                        this.$element[0].removeEventListener('transitionend', transition);\n                        callback();\n                        transitionEnded = true;\n                    }\n                };\n            if (this.$element.hasClass('fade')) {\n                this.$element[0].addEventListener('transitionend', transition);\n                this.$timeout(transition, 300);\n            } else {\n                callback();\n            }\n        }\n    }\n\n    _shouldChange(): boolean {\n        let ret = this.onBeforeChange();\n        if (ret !== false) {\n            ret = this.$injector.invoke(this.Modal.config.onBeforeChange, this);\n        }\n        return ret !== false;\n    }\n\n    show(): void {\n        if (this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = true;\n            this._doShow();\n        }\n    }\n\n    hide(): void {\n        if (!this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = false;\n            this._doHide();\n        }\n    }\n}\n\nexport function bsModalDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsModal\n     *\n     * @param {expression} bsModal\n     * @param {string|boolean} backdrop\n     * @param {boolean} keyboard\n     * @param {Function} onBeforeChange\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            bsModal: '=',\n            keyboard: '<?',\n            backdrop: '<?',\n            onBeforeChange: '&'\n        },\n        controller: BSModalController,\n        controllerAs: 'bsModal'\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class BSModalController {\n    constructor($scope, $element, $timeout, $document, $injector, Modal, ModalBackdrop) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$injector = $injector;\n        this.Modal = Modal;\n        this.ModalBackdrop = ModalBackdrop;\n    }\n    $onInit() {\n        if (angular.isUndefined(this.keyboard)) {\n            this.keyboard = this.Modal.config.keyboard;\n        }\n        if (angular.isUndefined(this.backdrop)) {\n            this.backdrop = this.Modal.config.backdrop;\n        }\n        // backdrop click\n        this.$element.on('click', (e) => {\n            if (window.getSelection().type === 'Range') {\n                return;\n            }\n            if (this.backdrop === true && e.target === this.$element[0]) { // .modal covers whole page\n                this.$scope.$apply(() => {\n                    this.hide();\n                });\n            }\n        });\n        // keyboard esc\n        this._keydownHandler = (e) => this._onKeydown(e);\n        this.$document.on('keydown', this._keydownHandler);\n    }\n    $doCheck() {\n        if (this._bsModal !== this.bsModal) {\n            this._bsModal = this.bsModal;\n            if (this.bsModal) {\n                this._doShow();\n            }\n            else {\n                this._doHide();\n            }\n        }\n    }\n    $onDestroy() {\n        if (this.bsModal) {\n            this._doHide();\n        }\n        this.$document.off('keydown', this._keydownHandler);\n    }\n    _onKeydown(e) {\n        if (this.keyboard && e.key === 'Escape') {\n            this.$scope.$apply(() => {\n                this.hide();\n            });\n        }\n    }\n    _doShow() {\n        if (!this.$element.hasClass('show')) {\n            this.$element.css({ display: 'block' });\n            this.$element[0].offsetWidth; // force reflow\n            this.ModalBackdrop\n                .show(!!this.backdrop, this.$element.hasClass('fade'))\n                .then(() => {\n                this.$element.addClass('show');\n            });\n        }\n    }\n    _doHide() {\n        if (this.$element.hasClass('show')) {\n            this.$element.removeClass('show');\n            let transitionEnded = false;\n            const callback = () => {\n                this.ModalBackdrop.hide();\n                this.$element.css({ display: '' });\n            }, transition = () => {\n                if (!transitionEnded) {\n                    this.$element[0].removeEventListener('transitionend', transition);\n                    callback();\n                    transitionEnded = true;\n                }\n            };\n            if (this.$element.hasClass('fade')) {\n                this.$element[0].addEventListener('transitionend', transition);\n                this.$timeout(transition, 300);\n            }\n            else {\n                callback();\n            }\n        }\n    }\n    _shouldChange() {\n        let ret = this.onBeforeChange();\n        if (ret !== false) {\n            ret = this.$injector.invoke(this.Modal.config.onBeforeChange, this);\n        }\n        return ret !== false;\n    }\n    show() {\n        if (this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = true;\n            this._doShow();\n        }\n    }\n    hide() {\n        if (!this.bsModal) {\n            return;\n        }\n        if (this._shouldChange()) {\n            this.bsModal = this._bsModal = false;\n            this._doHide();\n        }\n    }\n}\nexport function bsModalDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsModal\n     *\n     * @param {expression} bsModal\n     * @param {string|boolean} backdrop\n     * @param {boolean} keyboard\n     * @param {Function} onBeforeChange\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            bsModal: '=',\n            keyboard: '<?',\n            backdrop: '<?',\n            onBeforeChange: '&'\n        },\n        controller: BSModalController,\n        controllerAs: 'bsModal'\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IDirective} from 'angular';\n\nexport function dismissDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: '^bsModal',\n        link: function(scope, element, attrs, bsModal) {\n            element.on('click', function() {\n                scope.$apply(() => {\n                    bsModal.hide();\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport function dismissDirective() {\n    return {\n        restrict: 'A',\n        require: '^bsModal',\n        link: function (scope, element, attrs, bsModal) {\n            element.on('click', function () {\n                scope.$apply(() => {\n                    bsModal.hide();\n                });\n            });\n        }\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompileService, IDeferred, IDocumentService, IPromise, IQService, IRootScopeService, IScope} from 'angular';\nimport * as angular from 'angular';\nimport {BSModalBackdropController} from './bs-modal-backdrop.component';\n\ninterface IBackdropScope extends IScope {\n    isVisible: () => boolean\n}\n\n/**\n * @ngInject\n */\nexport class ModalBackdropFactory {\n    private $q: IQService;\n    private _isVisible = false;\n    private _isAnimated = false;\n    private _backDropPromise: IDeferred<void>;\n    private _openModals = 0;\n    private _bodyElement: JQLite;\n    public backdropController: BSModalBackdropController;\n\n    constructor($document: IDocumentService, $compile: ICompileService, $rootScope: IRootScopeService, $q: IQService) {\n        this.$q = $q;\n\n        this._bodyElement = $document.find('body');\n        const backdropElement = angular.element('<bs-modal-backdrop ng-if=\"isVisible()\"></bs-modal-backdrop>'),\n            backdropScope = $rootScope.$new(true) as IBackdropScope;\n        // create backdrop element in body\n        backdropScope.isVisible = this.isVisible.bind(this);\n        $compile(backdropElement)(backdropScope);\n        this._bodyElement.append(backdropElement);\n    }\n\n    isVisible(): boolean {\n        return this._isVisible;\n    }\n\n    isAnimated(): boolean {\n        return this._isAnimated;\n    }\n\n    show(backdrop: boolean, animate: boolean): IPromise<void> {\n        this._openModals++;\n        this._backDropPromise = this.$q.defer<void>();\n        this._isAnimated = !!animate;\n        this._bodyElement.addClass('modal-open');\n        if (backdrop && !this._isVisible) {\n            this._isVisible = true;\n        } else {\n            this._backDropPromise.resolve();\n        }\n        return this._backDropPromise.promise;\n    }\n\n    shown(): void {\n        this._backDropPromise.resolve();\n    }\n\n    hide(): void {\n        this._openModals--;\n        if (this._openModals < 0) {\n            this._openModals = 0;\n        }\n        if (this._openModals === 0) {\n            if (angular.isDefined(this.backdropController)) {\n                this.backdropController.hide().then(this._doHide);\n            } else {\n                this._doHide();\n            }\n        }\n    }\n\n    private _doHide = () => {\n        this._isVisible = false;\n        this._bodyElement.removeClass('modal-open');\n    }\n}\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class ModalBackdropFactory {\n    constructor($document, $compile, $rootScope, $q) {\n        this._isVisible = false;\n        this._isAnimated = false;\n        this._openModals = 0;\n        this._doHide = () => {\n            this._isVisible = false;\n            this._bodyElement.removeClass('modal-open');\n        };\n        this.$q = $q;\n        this._bodyElement = $document.find('body');\n        const backdropElement = angular.element('<bs-modal-backdrop ng-if=\"isVisible()\"></bs-modal-backdrop>'), backdropScope = $rootScope.$new(true);\n        // create backdrop element in body\n        backdropScope.isVisible = this.isVisible.bind(this);\n        $compile(backdropElement)(backdropScope);\n        this._bodyElement.append(backdropElement);\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    isAnimated() {\n        return this._isAnimated;\n    }\n    show(backdrop, animate) {\n        this._openModals++;\n        this._backDropPromise = this.$q.defer();\n        this._isAnimated = !!animate;\n        this._bodyElement.addClass('modal-open');\n        if (backdrop && !this._isVisible) {\n            this._isVisible = true;\n        }\n        else {\n            this._backDropPromise.resolve();\n        }\n        return this._backDropPromise.promise;\n    }\n    shown() {\n        this._backDropPromise.resolve();\n    }\n    hide() {\n        this._openModals--;\n        if (this._openModals < 0) {\n            this._openModals = 0;\n        }\n        if (this._openModals === 0) {\n            if (angular.isDefined(this.backdropController)) {\n                this.backdropController.hide().then(this._doHide);\n            }\n            else {\n                this._doHide();\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {ModalProvider} from './modal.provider';\nimport {ModalBackdropFactory} from './modal-backdrop.factory';\nimport {bsModalBackdropComponent} from './bs-modal-backdrop.component';\nimport {bsModalDirective} from './bs-modal.directive';\nimport {dismissDirective} from './dismiss.directive';\n\nconst modalModule = angular.module('angularBS.modal', [])\n    .provider('Modal', ModalProvider)\n    .factory('ModalBackdrop', ModalBackdropFactory)\n    .component('bsModalBackdrop', bsModalBackdropComponent)\n    .directive('bsModal', bsModalDirective)\n    .directive('dismiss', dismissDirective);\n\nexport const angularBSModal = modalModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { ModalProvider } from './modal.provider';\nimport { ModalBackdropFactory } from './modal-backdrop.factory';\nimport { bsModalBackdropComponent } from './bs-modal-backdrop.component';\nimport { bsModalDirective } from './bs-modal.directive';\nimport { dismissDirective } from './dismiss.directive';\nconst modalModule = angular.module('angularBS.modal', [])\n    .provider('Modal', ModalProvider)\n    .factory('ModalBackdrop', ModalBackdropFactory)\n    .component('bsModalBackdrop', bsModalBackdropComponent)\n    .directive('bsModal', bsModalDirective)\n    .directive('dismiss', dismissDirective);\nexport const angularBSModal = modalModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {Injectable} from 'angular';\nimport {BSModalController} from './bs-modal.directive';\n\ninterface IModalOptions {\n    backdrop: 'static' | boolean,\n    keyboard: boolean,\n    transitionDuration: number,\n    backdropTransitionDuration: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onBeforeChange: Injectable<(this: BSModalController, ...args: any[]) => boolean>\n}\n\nexport class ModalProvider {\n    public config: IModalOptions = {\n        backdrop: 'static',\n        keyboard: true,\n        transitionDuration: 300,\n        backdropTransitionDuration: 150,\n        onBeforeChange: () => true\n    }\n\n    public backdropController = null;\n\n    $get(): this {\n        return this;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class ModalProvider {\n    constructor() {\n        this.config = {\n            backdrop: 'static',\n            keyboard: true,\n            transitionDuration: 300,\n            backdropTransitionDuration: 150,\n            onBeforeChange: () => true\n        };\n        this.backdropController = null;\n    }\n    $get() {\n        return this;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nexport class BsPopoverBoundaryDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsPopoverBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsPopoverBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nexport class BsPopoverBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsPopoverBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsPopoverBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {\n    IAttributes,\n    ICompileService,\n    IDirective,\n    IDocumentService,\n    ISCEService,\n    IScope,\n    ITimeoutService\n} from 'angular';\nimport {IPopoverOptions} from './popover.provider';\nimport * as angular from 'angular';\nimport {placement} from '../helpers/angularBS.service';\n\ninterface IBSPopoverElementScope extends IScope {\n    bsPpCtrl: BsPopoverToggleDirectiveController\n}\n\n/**\n * @ngInject\n */\nclass BsPopoverToggleDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $compile: ICompileService;\n    private $timeout: ITimeoutService;\n    private $document: IDocumentService;\n    private $sce: ISCEService;\n    private Popover: IPopoverOptions;\n    private bsPopoverToggle: boolean;\n    private placement: placement;\n    private title: string;\n    private content: string;\n    private readonly documentClick: (JQueryEventObject) => void;\n    private html: string;\n    private popoverElement: JQLite = null;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $compile: ICompileService,\n        $timeout: ITimeoutService,\n        $document: IDocumentService,\n        $sce: ISCEService,\n        Popover: IPopoverOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Popover = Popover;\n\n        this.documentClick = (e: JQueryMouseEventObject) => {\n            if (!$element[0].contains(e.target)) {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            }\n        };\n\n        ['title', 'content'].forEach((attr) => {\n            $attrs.$observe(attr, (value) => {\n                if (!(angular.isDefined(this.html) && this.html) || Popover.html) {\n                    value = (value as string).replace(/[\\u00A0-\\u9999<>&'\"]/gim, function(i) {\n                        return '&#' + i.charCodeAt(0) + ';'\n                    });\n                }\n                this[attr] = $sce.trustAsHtml(value);\n                if (attr === 'title') {\n                    $element.attr('title', '');\n                }\n            });\n        });\n\n        const watcher = this.$scope.$watch(() => {\n            return this.bsPopoverToggle;\n        }, (nV) => {\n            if (nV) {\n                this.bsPopoverToggle = false;\n                this.$compile(\n                    '<bs-popover visible=\"bsPpCtrl.bsPopoverToggle\" animation=\"bsPpCtrl.animation\" '\n                    + 'delay=\"bsPpCtrl.delay\" placement=\"{{bsPpCtrl.placement}}\" '\n                    + 'parent-element=\"bsPpCtrl.$element\" '\n                    + 'boundary=\"bsPpCtrl.boundary\">'\n                    + '<bs-popover-title ng-bind-html=\"bsPpCtrl.title\"></bs-popover-title>'\n                    + '<bs-popover-content ng-bind-html=\"bsPpCtrl.content\"></bs-popover-content>'\n                    + '</bs-popover>'\n                )(this.$scope.$new(), (newElement, newScope: IBSPopoverElementScope) => {\n                    newScope.bsPpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this.popoverElement = newElement;\n                    // we delay popover display a little, to properly calculate its dimensions after its created\n                    $timeout(() => {\n                        this.bsPopoverToggle = true;\n                    }, 50);\n                });\n                watcher(); // create popover element once and leave it be\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.bsPopoverToggle)) {\n            this.bsPopoverToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Popover.trigger : this.$attrs.trigger)\n                .split(' '),\n            open = () => {\n                this.bsPopoverToggle = true;\n                this.$scope.$digest();\n            },\n            close = () => {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('click', open);\n            this.$document.on('click', this.documentClick);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsPopoverToggle = !this.bsPopoverToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Popover.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Popover.title);\n        this.content = this.$sce.trustAsHtml(this.Popover.content);\n    }\n\n    $onDestroy(): void {\n        if (this.popoverElement !== null) {\n            this.popoverElement.remove();\n        }\n        this.$document.off('click', this.documentClick);\n    }\n}\n\nexport function bsPopoverToggleDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsPopoverToggle\n     *\n     * @param {expression|boolean} bsPopoverToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsPopoverToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsPopoverBoundary', 'bsPopoverToggle'],\n        controllerAs: 'bsPpCtrl',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsPopoverToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsPopoverToggleDirectiveController {\n    constructor($scope, $element, $attrs, $compile, $timeout, $document, $sce, Popover) {\n        this.popoverElement = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Popover = Popover;\n        this.documentClick = (e) => {\n            if (!$element[0].contains(e.target)) {\n                this.bsPopoverToggle = false;\n                this.$scope.$digest();\n            }\n        };\n        ['title', 'content'].forEach((attr) => {\n            $attrs.$observe(attr, (value) => {\n                if (!(angular.isDefined(this.html) && this.html) || Popover.html) {\n                    value = value.replace(/[\\u00A0-\\u9999<>&'\"]/gim, function (i) {\n                        return '&#' + i.charCodeAt(0) + ';';\n                    });\n                }\n                this[attr] = $sce.trustAsHtml(value);\n                if (attr === 'title') {\n                    $element.attr('title', '');\n                }\n            });\n        });\n        const watcher = this.$scope.$watch(() => {\n            return this.bsPopoverToggle;\n        }, (nV) => {\n            if (nV) {\n                this.bsPopoverToggle = false;\n                this.$compile('<bs-popover visible=\"bsPpCtrl.bsPopoverToggle\" animation=\"bsPpCtrl.animation\" '\n                    + 'delay=\"bsPpCtrl.delay\" placement=\"{{bsPpCtrl.placement}}\" '\n                    + 'parent-element=\"bsPpCtrl.$element\" '\n                    + 'boundary=\"bsPpCtrl.boundary\">'\n                    + '<bs-popover-title ng-bind-html=\"bsPpCtrl.title\"></bs-popover-title>'\n                    + '<bs-popover-content ng-bind-html=\"bsPpCtrl.content\"></bs-popover-content>'\n                    + '</bs-popover>')(this.$scope.$new(), (newElement, newScope) => {\n                    newScope.bsPpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this.popoverElement = newElement;\n                    // we delay popover display a little, to properly calculate its dimensions after its created\n                    $timeout(() => {\n                        this.bsPopoverToggle = true;\n                    }, 50);\n                });\n                watcher(); // create popover element once and leave it be\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.bsPopoverToggle)) {\n            this.bsPopoverToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Popover.trigger : this.$attrs.trigger)\n            .split(' '), open = () => {\n            this.bsPopoverToggle = true;\n            this.$scope.$digest();\n        }, close = () => {\n            this.bsPopoverToggle = false;\n            this.$scope.$digest();\n        };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('click', open);\n            this.$document.on('click', this.documentClick);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsPopoverToggle = !this.bsPopoverToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Popover.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Popover.title);\n        this.content = this.$sce.trustAsHtml(this.Popover.content);\n    }\n    $onDestroy() {\n        if (this.popoverElement !== null) {\n            this.popoverElement.remove();\n        }\n        this.$document.off('click', this.documentClick);\n    }\n}\nexport function bsPopoverToggleDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsPopoverToggle\n     *\n     * @param {expression|boolean} bsPopoverToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsPopoverToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsPopoverBoundary', 'bsPopoverToggle'],\n        controllerAs: 'bsPpCtrl',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsPopoverToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {\n    IAttributes,\n    IComponentOptions,\n    IOnChangesObject,\n    IPromise,\n    IScope,\n    ITimeoutService\n} from 'angular';\nimport {IPopoverOptions, popoverDelay} from './popover.provider';\nimport {AngularBSService, placement} from '../helpers/angularBS.service';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsPopoverComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $timeout: ITimeoutService;\n    private Popover: IPopoverOptions;\n    private angularBS: AngularBSService;\n    private titleVisible: boolean;\n    private contentVisible: boolean;\n    private animation: boolean;\n    private delay: popoverDelay;\n    private placement: placement;\n    private defaultTitle: string;\n    private defaultContent: string;\n    private _delay: popoverDelay;\n    private visible: boolean;\n    private timeout: null | IPromise<void>;\n    private parentElement: JQLite;\n    private boundary: JQLite;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $timeout: ITimeoutService,\n        Popover: IPopoverOptions,\n        angularBS: AngularBSService\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Popover = Popover;\n        this.angularBS = angularBS;\n\n        //\n        $attrs.$observe('placement', (value) => {\n            this.placement = value as string;\n        });\n        // check if title & content are not empty\n        const title = angular.element($element[0].querySelector('.popover-header')),\n            content = angular.element($element[0].querySelector('.popover-body'));\n\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n\n        $scope.$watch(() => {\n            return content.text().trim();\n        }, (nV) => {\n            this.contentVisible = nV !== '';\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Popover.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Popover.delay;\n        }\n        this.placement = this.Popover.placement;\n        this.defaultTitle = this.Popover.title;\n        this.defaultContent = this.Popover.content;\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Popover.delay;\n        }\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay: number;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Popover.delay;\n            } else {\n                delay = this._delay;\n            }\n            if (this.timeout !== null) {\n                this.$timeout.cancel(this.timeout);\n            }\n            this.timeout = this.$timeout(() => {\n                this.timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(\n                            this.$element.children(), this.parentElement, this.placement,\n                            this.boundary !== null ? this.boundary : undefined,\n                            'bs-popover-'\n                        );\n                    } else { // static popover\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-popover-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                } else if (this.animation && !changes.visible.isFirstChange()) {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                } else {\n                    this.fadeIn = false;\n                }\n            }, delay);\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsPopoverTitle\n * @description contents of this element would be transcluded to .popover-title element\n */\n/**\n * @ngdoc component\n * @name bsPopoverContent\n * @description contents of this element would be transcluded to .popover-content element\n */\n\n/**\n * @ngdoc component\n * @name bsPopover\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param {string} placement\n */\nexport const bsPopoverComponent: IComponentOptions = {\n    template: '<div class=\"popover\" '\n        + 'ng-class=\"{\\'fade\\': bsPpCtrl.animation, \\'show\\': bsPpCtrl.fadeIn}\" '\n        + 'style=\"display: {{bsPpCtrl.visible || bsPpCtrl.fadeIn ? \\'block\\' : \\'none\\'}}\" '\n        + 'ng-show=\"bsPpCtrl.visible || bsPpCtrl.fadeIn\">'\n        + '<div class=\"arrow\"></div>'\n        + '<div class=\"popover-header\" ng-transclude=\"title\" ng-show=\"bsPpCtrl.titleVisible\">'\n        + '{{bsPpCtrl.defaultTitle}}'\n        + '</div>'\n        + '<div class=\"popover-body\" ng-transclude=\"content\" ng-show=\"bsPpCtrl.contentVisible\">'\n        + '{{bsPpCtrl.defaultContent}}'\n        + '</div>'\n        + '</div>',\n    controllerAs: 'bsPpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: {\n        title: '?bsPopoverTitle',\n        content: '?bsPopoverContent'\n    },\n    controller: BsPopoverComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsPopoverComponentController {\n    constructor($scope, $element, $attrs, $timeout, Popover, angularBS) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Popover = Popover;\n        this.angularBS = angularBS;\n        //\n        $attrs.$observe('placement', (value) => {\n            this.placement = value;\n        });\n        // check if title & content are not empty\n        const title = angular.element($element[0].querySelector('.popover-header')), content = angular.element($element[0].querySelector('.popover-body'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n        $scope.$watch(() => {\n            return content.text().trim();\n        }, (nV) => {\n            this.contentVisible = nV !== '';\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Popover.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Popover.delay;\n        }\n        this.placement = this.Popover.placement;\n        this.defaultTitle = this.Popover.title;\n        this.defaultContent = this.Popover.content;\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Popover.delay;\n        }\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Popover.delay;\n            }\n            else {\n                delay = this._delay;\n            }\n            if (this.timeout !== null) {\n                this.$timeout.cancel(this.timeout);\n            }\n            this.timeout = this.$timeout(() => {\n                this.timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(this.$element.children(), this.parentElement, this.placement, this.boundary !== null ? this.boundary : undefined, 'bs-popover-');\n                    }\n                    else { // static popover\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-popover-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                }\n                else if (this.animation && !changes.visible.isFirstChange()) {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n                else {\n                    this.fadeIn = false;\n                }\n            }, delay);\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsPopoverTitle\n * @description contents of this element would be transcluded to .popover-title element\n */\n/**\n * @ngdoc component\n * @name bsPopoverContent\n * @description contents of this element would be transcluded to .popover-content element\n */\n/**\n * @ngdoc component\n * @name bsPopover\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param {string} placement\n */\nexport const bsPopoverComponent = {\n    template: '<div class=\"popover\" '\n        + 'ng-class=\"{\\'fade\\': bsPpCtrl.animation, \\'show\\': bsPpCtrl.fadeIn}\" '\n        + 'style=\"display: {{bsPpCtrl.visible || bsPpCtrl.fadeIn ? \\'block\\' : \\'none\\'}}\" '\n        + 'ng-show=\"bsPpCtrl.visible || bsPpCtrl.fadeIn\">'\n        + '<div class=\"arrow\"></div>'\n        + '<div class=\"popover-header\" ng-transclude=\"title\" ng-show=\"bsPpCtrl.titleVisible\">'\n        + '{{bsPpCtrl.defaultTitle}}'\n        + '</div>'\n        + '<div class=\"popover-body\" ng-transclude=\"content\" ng-show=\"bsPpCtrl.contentVisible\">'\n        + '{{bsPpCtrl.defaultContent}}'\n        + '</div>'\n        + '</div>',\n    controllerAs: 'bsPpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: {\n        title: '?bsPopoverTitle',\n        content: '?bsPopoverContent'\n    },\n    controller: BsPopoverComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {helpers} from '../helpers/helpers.module';\nimport {PopoverProvider} from './popover.provider';\nimport {bsPopoverBoundaryDirective} from './bs-popover-boundary.directive';\nimport {bsPopoverComponent} from './bs-popover.component';\nimport {bsPopoverToggleDirective} from './bs-popover-toggle.directive';\n\nconst popoverModule = angular.module('angularBS.popover', [helpers])\n    .provider('Popover', PopoverProvider)\n    .directive('bsPopoverBoundary', bsPopoverBoundaryDirective)\n    .component('bsPopover', bsPopoverComponent)\n    .directive('bsPopoverToggle', bsPopoverToggleDirective);\n\nexport const angularBSPopover = popoverModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { helpers } from '../helpers/helpers.module';\nimport { PopoverProvider } from './popover.provider';\nimport { bsPopoverBoundaryDirective } from './bs-popover-boundary.directive';\nimport { bsPopoverComponent } from './bs-popover.component';\nimport { bsPopoverToggleDirective } from './bs-popover-toggle.directive';\nconst popoverModule = angular.module('angularBS.popover', [helpers])\n    .provider('Popover', PopoverProvider)\n    .directive('bsPopoverBoundary', bsPopoverBoundaryDirective)\n    .component('bsPopover', bsPopoverComponent)\n    .directive('bsPopoverToggle', bsPopoverToggleDirective);\nexport const angularBSPopover = popoverModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {placement} from '../helpers/angularBS.service';\n\nexport type popoverDelay = number | {show: number, hide: number};\n\nexport interface IPopoverOptions {\n    animation: boolean,\n    delay: popoverDelay,\n    html: boolean,\n    placement: placement,\n    title: string,\n    content: string,\n    trigger: 'click' | 'hover' | 'focus' | string\n}\n\nexport class PopoverProvider {\n    public config: IPopoverOptions ={\n        animation: true,\n        delay: 0,\n        html: false,\n        placement: 'right',\n        title: '',\n        content: '',\n        trigger: 'click'\n    }\n\n    $get(): IPopoverOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class PopoverProvider {\n    constructor() {\n        this.config = {\n            animation: true,\n            delay: 0,\n            html: false,\n            placement: 'right',\n            title: '',\n            content: '',\n            trigger: 'click'\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompileService, IComponentOptions, IOnChangesObject, IScope, ITranscludeFunction} from 'angular';\nimport {IToastsOptions} from './toasts.provider';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsToastComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $compile: ICompileService;\n    private Toasts: IToastsOptions;\n    private animation: boolean;\n    private visible: boolean;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $transclude: ITranscludeFunction,\n        $compile: ICompileService,\n        Toasts: IToastsOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n        this.Toasts = Toasts;\n\n        $transclude((elements, scope) => {\n            let header, body;\n            for (let i = 0; i < elements.length; i++) {\n                if (elements[i].tagName === 'BS-TOAST-HEADER') {\n                    header = elements[i];\n                } else if (elements[i].tagName === 'BS-TOAST-BODY') {\n                    body = elements[i];\n                }\n            }\n            if (header) {\n                header = angular.element(header);\n                header.addClass('toast-header');\n                $element.children().append($compile(header)(scope))\n            }\n            if (body) {\n                body = angular.element(body);\n                body.addClass('toast-body d-block');\n                $element.children().append($compile(body)(scope))\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Toasts.animation;\n        }\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = !!changes.visible.currentValue;\n            if (this.animation && !this.visible && !changes.visible.isFirstChange()) {\n                // properly display fade out animation\n                this.visible = true;\n                this.fadeIn = false;\n                const transition = () => {\n                    this.visible = false;\n                    this.$element.children()[0].removeEventListener('transitionend', transition);\n                    this.$scope.$digest();\n                };\n                this.$element.children()[0].addEventListener('transitionend', transition);\n            } else {\n                this.fadeIn = this.visible;\n            }\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsToastHeader\n * @description contents of this element would be transcluded to .toast-header element\n */\n/**\n * @ngdoc component\n * @name bsToastBody\n * @description contents of this element would be transcluded to .toast-body element\n */\n/**\n * @ngdoc component\n * @name bsToast\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n */\nexport const bsToastComponent: IComponentOptions = {\n    template: '<div class=\"toast\" '\n        + 'ng-class=\"{\\'fade\\': vm.animation, \\'show\\': vm.fadeIn}\" '\n        + 'style=\"display: {{vm.visible || vm.fadeIn ? \\'block\\' : \\'none\\'}}\">'\n        + '</div>',\n    controllerAs: 'vm',\n    bindings: {\n        visible: '<',\n        animation: '<'\n    },\n    transclude: true,\n    controller: BsToastComponentController\n};\n","import * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsToastComponentController {\n    constructor($scope, $element, $transclude, $compile, Toasts) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n        this.Toasts = Toasts;\n        $transclude((elements, scope) => {\n            let header, body;\n            for (let i = 0; i < elements.length; i++) {\n                if (elements[i].tagName === 'BS-TOAST-HEADER') {\n                    header = elements[i];\n                }\n                else if (elements[i].tagName === 'BS-TOAST-BODY') {\n                    body = elements[i];\n                }\n            }\n            if (header) {\n                header = angular.element(header);\n                header.addClass('toast-header');\n                $element.children().append($compile(header)(scope));\n            }\n            if (body) {\n                body = angular.element(body);\n                body.addClass('toast-body d-block');\n                $element.children().append($compile(body)(scope));\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Toasts.animation;\n        }\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = !!changes.visible.currentValue;\n            if (this.animation && !this.visible && !changes.visible.isFirstChange()) {\n                // properly display fade out animation\n                this.visible = true;\n                this.fadeIn = false;\n                const transition = () => {\n                    this.visible = false;\n                    this.$element.children()[0].removeEventListener('transitionend', transition);\n                    this.$scope.$digest();\n                };\n                this.$element.children()[0].addEventListener('transitionend', transition);\n            }\n            else {\n                this.fadeIn = this.visible;\n            }\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsToastHeader\n * @description contents of this element would be transcluded to .toast-header element\n */\n/**\n * @ngdoc component\n * @name bsToastBody\n * @description contents of this element would be transcluded to .toast-body element\n */\n/**\n * @ngdoc component\n * @name bsToast\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n */\nexport const bsToastComponent = {\n    template: '<div class=\"toast\" '\n        + 'ng-class=\"{\\'fade\\': vm.animation, \\'show\\': vm.fadeIn}\" '\n        + 'style=\"display: {{vm.visible || vm.fadeIn ? \\'block\\' : \\'none\\'}}\">'\n        + '</div>',\n    controllerAs: 'vm',\n    bindings: {\n        visible: '<',\n        animation: '<'\n    },\n    transclude: true,\n    controller: BsToastComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport {ToastsProvider} from './toasts.provider';\nimport {bsToastComponent} from './bs-toast.component';\n\nconst toastsModule = angular.module('angularBS.toasts', [])\n    .provider('Toasts', ToastsProvider)\n    .component('bsToast', bsToastComponent);\n\nexport const angularBSToasts = toastsModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\nimport { ToastsProvider } from './toasts.provider';\nimport { bsToastComponent } from './bs-toast.component';\nconst toastsModule = angular.module('angularBS.toasts', [])\n    .provider('Toasts', ToastsProvider)\n    .component('bsToast', bsToastComponent);\nexport const angularBSToasts = toastsModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface IToastsOptions {\n    animation: boolean\n}\n\nexport class ToastsProvider {\n    public config: IToastsOptions = {\n        animation: true\n    }\n\n    $get(): IToastsOptions {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nexport class ToastsProvider {\n    constructor() {\n        this.config = {\n            animation: true\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {IDirective} from 'angular';\n\n/**\n * @ngInject\n */\nclass BsTooltipBoundaryDirectiveController {\n    private $element: JQLite;\n\n    constructor($element: JQLite) {\n        this.$element = $element;\n    }\n}\n\nexport function bsTooltipBoundaryDirective(): IDirective {\n    return {\n        restrict: 'A',\n        controller: BsTooltipBoundaryDirectiveController\n    };\n}\n","/**\n * @ngInject\n */\nclass BsTooltipBoundaryDirectiveController {\n    constructor($element) {\n        this.$element = $element;\n    }\n}\nexport function bsTooltipBoundaryDirective() {\n    return {\n        restrict: 'A',\n        controller: BsTooltipBoundaryDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, ICompileService, IDirective, IDocumentService, ISCEService, IScope} from 'angular';\nimport {ITooltipOptions} from './tooltip.provider';\nimport * as angular from 'angular';\nimport {placement} from '../helpers/angularBS.service';\n\ninterface IBSTooltipScope extends IScope {\n    bsTpCtrl: BsTooltipToggleDirectiveController\n}\n\n/**\n * @ngInject\n */\nexport class BsTooltipToggleDirectiveController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private $document: IDocumentService;\n    private $sce: ISCEService;\n    private Tooltip: ITooltipOptions;\n    private _tooltipElement: JQLite = null;\n    private html: boolean;\n    private title: string;\n    private bsTooltipToggle: boolean;\n    private placement: placement;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $compile: ICompileService,\n        $document: IDocumentService,\n        $sce: ISCEService,\n        Tooltip: ITooltipOptions\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Tooltip = Tooltip;\n\n        $attrs.$observe('title', (value) => {\n            if (!(angular.isDefined(this.html) && this.html) || Tooltip.html) {\n                value = (value as string).replace(/[\\u00A0-\\u9999<>&'\"]/gim, (i) => {\n                    return '&#' + i.charCodeAt(0) + ';'\n                });\n            }\n            this.title = $sce.trustAsHtml(value);\n            $element.attr('title', '');\n        });\n\n        const watcher = $scope.$watch(() => {\n            return this.bsTooltipToggle;\n        }, (nV) => {\n            if (nV) {\n                $compile(\n                    '<bs-tooltip visible=\"bsTpCtrl.bsTooltipToggle\" animation=\"bsTpCtrl.animation\" '\n                    + 'delay=\"bsTpCtrl.delay\" placement=\"{{bsTpCtrl.placement}}\" '\n                    + 'parent-element=\"bsTpCtrl.$element\" '\n                    + 'boundary=\"bsTpCtrl.boundary\">'\n                    + '<span ng-bind-html=\"bsTpCtrl.title\"></span></bs-tooltip>'\n                )($scope.$new(), (newElement, newScope: IBSTooltipScope) => {\n                    newScope.bsTpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this._tooltipElement = newElement;\n                });\n                watcher(); // create tooltip element once and leave it be\n            }\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.bsTooltipToggle)) {\n            this.bsTooltipToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Tooltip.trigger : this.$attrs.trigger)\n                .split(' '),\n            open = () => {\n                this.bsTooltipToggle = true;\n                this.$scope.$digest();\n            },\n            close = () => {\n                this.bsTooltipToggle = false;\n                this.$scope.$digest();\n            };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('focus', open);\n            this.$element.on('blur', close);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsTooltipToggle = !this.bsTooltipToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Tooltip.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Tooltip.title);\n    }\n\n    $onDestroy(): void {\n        if (this._tooltipElement !== null) {\n            this._tooltipElement.remove();\n        }\n    }\n}\n\nexport function bsTooltipToggleDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name bsTooltipToggle\n     *\n     * @param {expression|boolean} bsTooltipToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsTooltipToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsTooltipBoundary', 'bsTooltipToggle'],\n        controllerAs: 'bsTpCtrl',\n        link: function(scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsTooltipToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class BsTooltipToggleDirectiveController {\n    constructor($scope, $element, $attrs, $compile, $document, $sce, Tooltip) {\n        this._tooltipElement = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$document = $document;\n        this.$sce = $sce;\n        this.Tooltip = Tooltip;\n        $attrs.$observe('title', (value) => {\n            if (!(angular.isDefined(this.html) && this.html) || Tooltip.html) {\n                value = value.replace(/[\\u00A0-\\u9999<>&'\"]/gim, (i) => {\n                    return '&#' + i.charCodeAt(0) + ';';\n                });\n            }\n            this.title = $sce.trustAsHtml(value);\n            $element.attr('title', '');\n        });\n        const watcher = $scope.$watch(() => {\n            return this.bsTooltipToggle;\n        }, (nV) => {\n            if (nV) {\n                $compile('<bs-tooltip visible=\"bsTpCtrl.bsTooltipToggle\" animation=\"bsTpCtrl.animation\" '\n                    + 'delay=\"bsTpCtrl.delay\" placement=\"{{bsTpCtrl.placement}}\" '\n                    + 'parent-element=\"bsTpCtrl.$element\" '\n                    + 'boundary=\"bsTpCtrl.boundary\">'\n                    + '<span ng-bind-html=\"bsTpCtrl.title\"></span></bs-tooltip>')($scope.$new(), (newElement, newScope) => {\n                    newScope.bsTpCtrl = this;\n                    $document.find('body').append(newElement);\n                    this._tooltipElement = newElement;\n                });\n                watcher(); // create tooltip element once and leave it be\n            }\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.bsTooltipToggle)) {\n            this.bsTooltipToggle = false;\n        }\n        const triggers = (angular.isUndefined(this.$attrs.trigger) ? this.Tooltip.trigger : this.$attrs.trigger)\n            .split(' '), open = () => {\n            this.bsTooltipToggle = true;\n            this.$scope.$digest();\n        }, close = () => {\n            this.bsTooltipToggle = false;\n            this.$scope.$digest();\n        };\n        if (~triggers.indexOf('hover')) {\n            this.$element.on('mouseenter', open);\n            this.$element.on('mouseleave', close);\n        }\n        if (~triggers.indexOf('focus')) {\n            this.$element.on('focus', open);\n            this.$element.on('blur', close);\n        }\n        if (~triggers.indexOf('click')) {\n            this.$element.on('click', () => {\n                this.bsTooltipToggle = !this.bsTooltipToggle;\n                this.$scope.$digest();\n            });\n        }\n        this.placement = angular.isUndefined(this.$attrs.placement) ? this.Tooltip.placement : this.$attrs.placement;\n        this.title = this.$sce.trustAsHtml(this.Tooltip.title);\n    }\n    $onDestroy() {\n        if (this._tooltipElement !== null) {\n            this._tooltipElement.remove();\n        }\n    }\n}\nexport function bsTooltipToggleDirective() {\n    /**\n     * @ngdoc directive\n     * @name bsTooltipToggle\n     *\n     * @param {expression|boolean} bsTooltipToggle\n     * @param {expression|boolean} animation\n     * @param {expression|number} delay\n     * @param {expression|boolean} html\n     * @param placement\n     * @param title\n     * @param trigger\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            bsTooltipToggle: '=?',\n            animation: '<?',\n            delay: '<?',\n            html: '<?'\n        },\n        require: ['?^bsTooltipBoundary', 'bsTooltipToggle'],\n        controllerAs: 'bsTpCtrl',\n        link: function (scope, element, attrs, ctrl) {\n            ctrl[1].boundary = ctrl[0] === null ? null : ctrl[0].$element;\n        },\n        controller: BsTooltipToggleDirectiveController\n    };\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IAttributes, IComponentOptions, IOnChangesObject, IPromise, IScope, ITimeoutService} from 'angular';\nimport {ITooltipOptions, tooltipDelay} from './tooltip.provider';\nimport {AngularBSService, placement} from '../helpers/angularBS.service';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nclass BsTooltipComponentController {\n    private $scope: IScope;\n    private $element: JQLite;\n    private $attrs: IAttributes;\n    private readonly $timeout: ITimeoutService;\n    private Tooltip: ITooltipOptions;\n    private angularBS: AngularBSService;\n    private _delay: tooltipDelay;\n    private _timeout: IPromise<void> = null;\n    private placement: placement;\n    private titleVisible: boolean;\n    private animation: boolean;\n    private delay: tooltipDelay;\n    private defaultTitle: string;\n    private visible: boolean;\n    private parentElement: JQLite;\n    private boundary: JQLite;\n    private fadeIn: boolean;\n\n    constructor(\n        $scope: IScope,\n        $element: JQLite,\n        $attrs: IAttributes,\n        $timeout: ITimeoutService,\n        Tooltip: ITooltipOptions,\n        angularBS: AngularBSService\n    ) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Tooltip = Tooltip;\n        this.angularBS = angularBS;\n\n        $attrs.$observe('placement', (value) => {\n            this.placement = value as string;\n        });\n        // check if title is not empty\n        const title = angular.element($element[0].querySelector('.tooltip-inner'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Tooltip.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Tooltip.delay;\n        }\n        this.placement = this.Tooltip.placement;\n        this.defaultTitle = this.Tooltip.title;\n        this.$element.children().css({top: 0});\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Tooltip.delay;\n        }\n        if (\n            angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue\n        ) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay: number;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Tooltip.delay;\n            } else {\n                delay = this._delay;\n            }\n            if (this._timeout !== null) {\n                this.$timeout.cancel(this._timeout);\n            }\n            this._timeout = this.$timeout(() => {\n                this._timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(\n                            this.$element.children(), this.parentElement, this.placement,\n                            this.boundary !== null ? this.boundary : undefined,\n                            'bs-tooltip-'\n                        );\n                    } else { // static tooltip\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-tooltip-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                } else {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n            }, delay);\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name bsTooltip\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param placement\n */\nexport const bsTooltipComponent: IComponentOptions = {\n    template: '<div class=\"tooltip\" '\n        + 'ng-class=\"{\\'fade\\': bsTpCtrl.animation, \\'show\\': bsTpCtrl.fadeIn}\" '\n        + 'ng-show=\"bsTpCtrl.visible || bsTpCtrl.fadeIn\">'\n        + '<div class=\"arrow\" ng-show=\"bsTpCtrl.titleVisible\"></div>'\n        + '<div class=\"tooltip-inner\" ng-transclude ng-show=\"bsTpCtrl.titleVisible\">{{bsTpCtrl.defaultTitle}}</div>'\n        + '</div>',\n    controllerAs: 'bsTpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: true,\n    controller: BsTooltipComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nclass BsTooltipComponentController {\n    constructor($scope, $element, $attrs, $timeout, Tooltip, angularBS) {\n        this._timeout = null;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$timeout = $timeout;\n        this.Tooltip = Tooltip;\n        this.angularBS = angularBS;\n        $attrs.$observe('placement', (value) => {\n            this.placement = value;\n        });\n        // check if title is not empty\n        const title = angular.element($element[0].querySelector('.tooltip-inner'));\n        $scope.$watch(() => {\n            return title.text().trim();\n        }, (nV) => {\n            this.titleVisible = nV !== '';\n        });\n    }\n    $onInit() {\n        if (angular.isUndefined(this.animation)) {\n            this.animation = this.Tooltip.animation;\n        }\n        if (angular.isUndefined(this.delay)) {\n            this.delay = this.Tooltip.delay;\n        }\n        this.placement = this.Tooltip.placement;\n        this.defaultTitle = this.Tooltip.title;\n        this.$element.children().css({ top: 0 });\n    }\n    $onChanges(changes) {\n        if (angular.isDefined(changes.delay)) {\n            this._delay = angular.isDefined(changes.delay.currentValue)\n                ? changes.delay.currentValue : this.Tooltip.delay;\n        }\n        if (angular.isDefined(changes.visible)\n            && changes.visible.previousValue !== changes.visible.currentValue) {\n            this.visible = changes.visible.currentValue !== false;\n            let delay;\n            if (angular.isObject(this._delay)) {\n                delay = this._delay[this.visible ? 'show' : 'hide'] || this.Tooltip.delay;\n            }\n            else {\n                delay = this._delay;\n            }\n            if (this._timeout !== null) {\n                this.$timeout.cancel(this._timeout);\n            }\n            this._timeout = this.$timeout(() => {\n                this._timeout = null;\n                if (this.visible) {\n                    if (this.parentElement) {\n                        this.angularBS.positionElement(this.$element.children(), this.parentElement, this.placement, this.boundary !== null ? this.boundary : undefined, 'bs-tooltip-');\n                    }\n                    else { // static tooltip\n                        this.angularBS.setPlacementCSS(this.$element.children(), 'bs-tooltip-', this.placement);\n                        this.angularBS.adjustArrow(this.$element.children(), this.placement);\n                    }\n                    this.fadeIn = this.visible;\n                }\n                else {\n                    // properly display fade out animation\n                    this.visible = true;\n                    this.fadeIn = false;\n                    const transition = () => {\n                        this.visible = false;\n                        this.$element.children()[0].removeEventListener('transitionend', transition);\n                        this.$scope.$digest();\n                    };\n                    this.$element.children()[0].addEventListener('transitionend', transition);\n                }\n            }, delay);\n        }\n    }\n}\n/**\n * @ngdoc component\n * @name bsTooltip\n *\n * @param {expression|boolean} visible\n * @param {expression|boolean} animation\n * @param {expression|number} delay\n * @param {expression} parentElement\n * @param {expression} boundary\n * @param placement\n */\nexport const bsTooltipComponent = {\n    template: '<div class=\"tooltip\" '\n        + 'ng-class=\"{\\'fade\\': bsTpCtrl.animation, \\'show\\': bsTpCtrl.fadeIn}\" '\n        + 'ng-show=\"bsTpCtrl.visible || bsTpCtrl.fadeIn\">'\n        + '<div class=\"arrow\" ng-show=\"bsTpCtrl.titleVisible\"></div>'\n        + '<div class=\"tooltip-inner\" ng-transclude ng-show=\"bsTpCtrl.titleVisible\">{{bsTpCtrl.defaultTitle}}</div>'\n        + '</div>',\n    controllerAs: 'bsTpCtrl',\n    bindings: {\n        visible: '<',\n        animation: '<',\n        delay: '<',\n        parentElement: '<',\n        boundary: '<'\n    },\n    transclude: true,\n    controller: BsTooltipComponentController\n};\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IInjectorService = angular.auto.IInjectorService;\nimport {IDirective} from 'angular';\nimport {BsTooltipToggleDirectiveController} from './bs-tooltip-toggle.directive';\n\n/**\n * @ngInject\n */\nexport class BsTooltipFactory {\n    private $injector: IInjectorService;\n\n    constructor($injector: IInjectorService) {\n        this.$injector = $injector;\n    }\n\n    customBindingDirective(): IDirective {\n        return {\n            restrict: 'A',\n            require: '?^bsTooltipBoundary',\n            compile: (element, attrs) => {\n                if (!('bsTooltipToggle' in attrs) && !('bsPopoverToggle' in attrs)) {\n                    return (scope, element, attrs, ctrl) => {\n                        const directive = this.$injector.get('bsTooltipToggleDirective')[0],\n                            bsTooltipToggleCtrl = this.$injector.instantiate(directive.controller, {\n                                '$scope': scope,\n                                '$element': element,\n                                '$attrs': attrs\n                            }) as BsTooltipToggleDirectiveController;\n                        directive.compile(\n                            element, scope, attrs, [ctrl, bsTooltipToggleCtrl]\n                        )(\n                            scope, element, attrs, [ctrl, bsTooltipToggleCtrl]\n                        );\n                        bsTooltipToggleCtrl.$onInit();\n                        element.on('$destroy', function() {\n                            bsTooltipToggleCtrl.$onDestroy();\n                        });\n                    }\n                }\n            }\n        }\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n/**\n * @ngInject\n */\nexport class BsTooltipFactory {\n    constructor($injector) {\n        this.$injector = $injector;\n    }\n    customBindingDirective() {\n        return {\n            restrict: 'A',\n            require: '?^bsTooltipBoundary',\n            compile: (element, attrs) => {\n                if (!('bsTooltipToggle' in attrs) && !('bsPopoverToggle' in attrs)) {\n                    return (scope, element, attrs, ctrl) => {\n                        const directive = this.$injector.get('bsTooltipToggleDirective')[0], bsTooltipToggleCtrl = this.$injector.instantiate(directive.controller, {\n                            '$scope': scope,\n                            '$element': element,\n                            '$attrs': attrs\n                        });\n                        directive.compile(element, scope, attrs, [ctrl, bsTooltipToggleCtrl])(scope, element, attrs, [ctrl, bsTooltipToggleCtrl]);\n                        bsTooltipToggleCtrl.$onInit();\n                        element.on('$destroy', function () {\n                            bsTooltipToggleCtrl.$onDestroy();\n                        });\n                    };\n                }\n            }\n        };\n    }\n}\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {helpers} from '../helpers/helpers.module';\nimport * as angular from 'angular';\nimport {TooltipProvider} from './tooltip.provider';\nimport {bsTooltipBoundaryDirective} from './bs-tooltip-boundary.directive';\nimport {BsTooltipFactory} from './bs-tooltip.factory';\nimport {bsTooltipToggleDirective} from './bs-tooltip-toggle.directive';\nimport {bsTooltipComponent} from './bs-tooltip.component';\n\nconst tooltipModule = angular.module('angularBS.tooltip', [helpers])\n    .provider('Tooltip', TooltipProvider)\n    .factory('bsTooltipFactory',  BsTooltipFactory)\n    .directive('bsTooltipBoundary', bsTooltipBoundaryDirective)\n    .directive('bsTooltipToggle', bsTooltipToggleDirective)\n    .component('bsTooltip', bsTooltipComponent);\n\nexport const angularBSTooltip = tooltipModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport { helpers } from '../helpers/helpers.module';\nimport * as angular from 'angular';\nimport { TooltipProvider } from './tooltip.provider';\nimport { bsTooltipBoundaryDirective } from './bs-tooltip-boundary.directive';\nimport { BsTooltipFactory } from './bs-tooltip.factory';\nimport { bsTooltipToggleDirective } from './bs-tooltip-toggle.directive';\nimport { bsTooltipComponent } from './bs-tooltip.component';\nconst tooltipModule = angular.module('angularBS.tooltip', [helpers])\n    .provider('Tooltip', TooltipProvider)\n    .factory('bsTooltipFactory', BsTooltipFactory)\n    .directive('bsTooltipBoundary', bsTooltipBoundaryDirective)\n    .directive('bsTooltipToggle', bsTooltipToggleDirective)\n    .component('bsTooltip', bsTooltipComponent);\nexport const angularBSTooltip = tooltipModule.name;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {placement} from '../helpers/angularBS.service';\n\nexport type tooltipDelay = number | { show: number, hide: number };\n\nexport interface ITooltipOptions {\n    animation: boolean,\n    delay: tooltipDelay,\n    placement: placement,\n    html: boolean,\n    title: string,\n    trigger: 'click' | 'hover' | 'focus' | string\n}\n\nexport class TooltipProvider {\n    public config: ITooltipOptions = {\n        animation: true,\n        delay: 0,\n        placement: 'bottom',\n        html: false,\n        title: '',\n        trigger: 'hover focus'\n    }\n\n    $get(): ITooltipOptions {\n        return this.config;\n    }\n}\n","export class TooltipProvider {\n    constructor() {\n        this.config = {\n            animation: true,\n            delay: 0,\n            placement: 'bottom',\n            html: false,\n            title: '',\n            trigger: 'hover focus'\n        };\n    }\n    $get() {\n        return this.config;\n    }\n}\n","/**\n * @license AngularJS v1.8.0\n * (c) 2010-2020 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\nvar PREPARE_CLASS_SUFFIX = '-prepare';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif ((window.ontransitionend === undefined) && (window.onwebkittransitionend !== undefined)) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif ((window.onanimationend === undefined) && (window.onwebkitanimationend !== undefined)) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar ngMinErr = angular.$$minErr('ng');\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', 'Argument \\'{0}\\' is {1}', (name || '?'), (reason || 'required'));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return element;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType === ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  };\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\n  var target = oldAnimation.options || {};\n  var newOptions = newAnimation.options || {};\n\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  oldAnimation.addClass = target.addClass;\n  oldAnimation.removeClass = target.removeClass;\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof jqLite) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses($$jqLite, element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nvar helpers = {\n  blockTransitions: function(node, duration) {\n    // we use a negative delay value since it performs blocking\n    // yet it doesn't kill any existing transitions running on the\n    // same element which makes this safe for class-based animations\n    var value = duration ? '-' + duration + 's' : '';\n    applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n    return [TRANSITION_DELAY_PROP, value];\n  }\n};\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateChildren\n * @restrict AE\n * @element ANY\n *\n * @description\n *\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\n * (structural) animation, child elements that also have an active structural animation are not animated.\n *\n * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\n *\n *\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\n *\n * @example\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainController as main\">\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\n         <hr>\n         <div ng-animate-children=\"{{main.animateChildren}}\">\n           <div ng-if=\"main.enterElement\" class=\"container\">\n             List of items:\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\n           </div>\n         </div>\n       </div>\n     </file>\n     <file name=\"animations.css\">\n\n      .container.ng-enter,\n      .container.ng-leave {\n        transition: all ease 1.5s;\n      }\n\n      .container.ng-enter,\n      .container.ng-leave-active {\n        opacity: 0;\n      }\n\n      .container.ng-leave,\n      .container.ng-enter-active {\n        opacity: 1;\n      }\n\n      .item {\n        background: firebrick;\n        color: #FFF;\n        margin-bottom: 10px;\n      }\n\n      .item.ng-enter,\n      .item.ng-leave {\n        transition: transform 1.5s ease;\n      }\n\n      .item.ng-enter {\n        transform: translateX(50px);\n      }\n\n      .item.ng-enter-active {\n        transform: translateX(0);\n      }\n    </file>\n    <file name=\"script.js\">\n      angular.module('ngAnimateChildren', ['ngAnimate'])\n        .controller('MainController', function MainController() {\n          this.animateChildren = false;\n          this.enterElement = false;\n        });\n    </file>\n  </example>\n */\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\n  return {\n    link: function(scope, element, attrs) {\n      var val = attrs.ngAnimateChildren;\n      if (isString(val) && val.length === 0) { //empty attribute\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\n      } else {\n        // Interpolate and set the value, so that it is available to\n        // animations that run right after compilation\n        setData($interpolate(val)(scope));\n        attrs.$observe('ngAnimateChildren', setData);\n      }\n\n      function setData(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      }\n    }\n  };\n}];\n\n/* exported $AnimateCssProvider */\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## General Use\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by AngularJS. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\n *    By default this value is set to `false`.\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for negative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) === 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\n// we do not reassign an already present style value since\n// if we detect the style property value again we may be\n// detecting styles that were added via the `from` styles.\n// We make use of `isDefined` here since an empty string\n// or null value (which is what getPropertyValue will return\n// for a non-existing style) will still be marked as a valid\n// value for the style (a falsy value implies that the style\n// is to be removed at the end of the animation). If we had a simple\n// \"OR\" statement then it would not be enough to catch that.\nfunction registerRestorableStyles(backup, node, properties) {\n  forEach(properties, function(prop) {\n    backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n  });\n}\n\nvar $AnimateCssProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout', '$$animateCache',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,   $$animateCache,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function computeCachedCssStyles(node, className, cacheKey, allowNoDuration, properties) {\n      var timings = $$animateCache.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // if a css animation has no duration we\n      // should mark that so that repeated addClass/removeClass calls are skipped\n      var hasDuration = allowNoDuration || (timings.transitionDuration > 0 || timings.animationDuration > 0);\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an internal tally of how many duplicate animations are detected.\n      $$animateCache.put(cacheKey, timings, hasDuration);\n\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n      var staggerCacheKey = 'stagger-' + cacheKey;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if ($$animateCache.count(cacheKey) > 0) {\n        stagger = $$animateCache.get(staggerCacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          $$animateCache.put(staggerCacheKey, stagger, true);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        $$animateCache.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey, allowNoDuration) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, allowNoDuration, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, initialOptions) {\n      // all of the animation functions should create\n      // a copy of the options data, however, if a\n      // parent service has already created a copy then\n      // we should stick to using that\n      var options = initialOptions || {};\n      if (!options.$$prepared) {\n        options = prepareAnimationOptions(copy(options));\n      }\n\n      var restoreStyles = {};\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$$animateQueue.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n      var startTime;\n      var events = [];\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var stagger, cacheKey = $$animateCache.cacheKey(node, method, options.addClass, options.removeClass);\n      if ($$animateCache.containsCachedAnimationWithoutDuration(cacheKey)) {\n        preparationClasses = null;\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : $$animateCache.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        helpers.blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey, !isStructural);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty === 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n\n      if (options.delay != null) {\n        var delayStyle;\n        if (typeof options.delay !== 'boolean') {\n          delayStyle = parseFloat(options.delay);\n          // number in options.delay means we have to recalculate the delay for the closing timeout\n          maxDelay = Math.max(delayStyle, 0);\n        }\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      if (options.from) {\n        if (options.cleanupStyles) {\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n        }\n        applyAnimationFromStyles(element, options);\n      }\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        helpers.blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) {\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (preparationClasses && !options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n\n        if (activeClasses) {\n          $$jqLite.removeClass(element, activeClasses);\n        }\n\n        blockKeyframeAnimations(node, false);\n        helpers.blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        if (Object.keys(restoreStyles).length) {\n          forEach(restoreStyles, function(value, prop) {\n            if (value) {\n              node.style.setProperty(prop, value);\n            } else {\n              node.style.removeProperty(prop);\n            }\n          });\n        }\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        if (events && events.length) {\n          // Remove the transitionend / animationend listener(s)\n          element.off(events.join(' '), onAnimationProgress);\n        }\n\n        //Cancel the fallback closing timeout and remove the timer data\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\n        if (animationTimerData) {\n          $timeout.cancel(animationTimerData[0].timer);\n          element.removeData(ANIMATE_TIMER_KEY);\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          helpers.blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function onAnimationProgress(event) {\n        event.stopPropagation();\n        var ev = event.originalEvent || event;\n\n        if (ev.target !== node) {\n          // Since TransitionEvent / AnimationEvent bubble up,\n          // we have to ignore events by finished child animations\n          return;\n        }\n\n        // we now always use `Date.now()` due to the recent changes with\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\n        var timeStamp = ev.$manualTimeStamp || Date.now();\n\n        /* Firefox (or possibly just Gecko) likes to not round values up\n         * when a ms measurement is used for the animation */\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n        /* $manualTimeStamp is a mocked timeStamp value which is set\n         * within browserTrigger(). This is only here so that tests can\n         * mock animations properly. Real events fallback to event.timeStamp,\n         * or, if they don't, then a timeStamp is automatically created for them.\n         * We're checking to see if the timeStamp surpasses the expected delay,\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\n         * pre-condition since animationPauseds sometimes close off early */\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n          // we set this flag to ensure that if the transition is paused then, when resumed,\n          // the animation will automatically close itself since transitions cannot be paused.\n          animationCompleted = true;\n          close();\n        }\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              if (animationPaused) {\n                temporaryStyles.push(value);\n              } else {\n                removeFromArray(temporaryStyles, value);\n              }\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intentional stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.getAttribute('class') + ' ' + preparationClasses;\n            cacheKey = $$animateCache.cacheKey(node, method, options.addClass, options.removeClass);\n\n            timings = computeTimings(node, fullClassName, cacheKey, false);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          if (events.length) {\n            element.on(events.join(' '), onAnimationProgress);\n          }\n\n          if (options.to) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n            }\n            applyAnimationToStyles(element, options);\n          }\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  function isDocumentFragment(node) {\n    return node.parentNode && node.parentNode.nodeType === 11;\n  }\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = $document[0].body;\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(\n      // this is to avoid using something that exists outside of the body\n      // we also special case the doc fragment case because our unit test code\n      // appends the $rootElement to the body after the app has been bootstrapped\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n    );\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coords object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      var animationClosed = false;\n\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event === 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      function close() {\n        animationClosed = true;\n        applyOptions();\n        applyAnimationStyles(element, options);\n      }\n\n      var runner;\n\n      return {\n        $$willAnimate: true,\n        end: function() {\n          if (runner) {\n            runner.end();\n          } else {\n            close();\n            runner = new $$AnimateRunner();\n            runner.complete(true);\n          }\n          return runner;\n        },\n        start: function() {\n          if (runner) {\n            return runner;\n          }\n\n          runner = new $$AnimateRunner();\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          runner.setHost({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            close(success);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a, b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          if (runners.length) {\n            $$AnimateRunner.all(runners, callback);\n          }  else {\n            callback();\n          }\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              if (reject) {\n                runner.cancel();\n              } else {\n                runner.end();\n              }\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i = 0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */ function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n  var ONE_SPACE = ' ';\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function getEventData(options) {\n    return {\n      addClass: options.addClass,\n      removeClass: options.removeClass,\n      from: options.from,\n      to: options.to\n    };\n  }\n\n  function makeTruthyCssClassMap(classString) {\n    if (!classString) {\n      return null;\n    }\n\n    var keys = classString.split(ONE_SPACE);\n    var map = Object.create(null);\n\n    forEach(keys, function(key) {\n      map[key] = true;\n    });\n    return map;\n  }\n\n  function hasMatchingClasses(newClassString, currentClassString) {\n    if (newClassString && currentClassString) {\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\n      return newClassString.split(ONE_SPACE).some(function(className) {\n        return currentClassMap[className];\n      });\n    }\n  }\n\n  function isAllowed(ruleType, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(animation, and) {\n    var a = (animation.addClass || '').length > 0;\n    var b = (animation.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event === 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(newAnimation, currentAnimation) {\n    // cancel the animation if classes added / removed in both animation cancel each other out,\n    // but only if the current animation isn't structural\n\n    if (currentAnimation.structural) return false;\n\n    var nA = newAnimation.addClass;\n    var nR = newAnimation.removeClass;\n    var cA = currentAnimation.addClass;\n    var cR = currentAnimation.removeClass;\n\n    // early detection to save the global CPU shortage :)\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\n      return false;\n    }\n\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$Map',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n               '$$isDocumentHidden',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$Map,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow,\n                $$isDocumentHidden) {\n\n    var activeAnimationsLookup = new $$Map();\n    var disabledElementsLookup = new $$Map();\n    var animationsEnabled = null;\n\n    function removeFromDisabledElementsLookup(evt) {\n      disabledElementsLookup.delete(evt.target);\n    }\n\n    function postDigestTaskFactory() {\n      var postDigestCalled = false;\n      return function(fn) {\n        // we only issue a call to postDigest before\n        // it has first passed. This prevents any callbacks\n        // from not firing once the animation has completed\n        // since it will be out of the digest cycle.\n        if (postDigestCalled) {\n          fn();\n        } else {\n          $rootScope.$$postDigest(function() {\n            postDigestCalled = true;\n            fn();\n          });\n        }\n      };\n    }\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = Object.create(null);\n\n    // remember that the `customFilter`/`classNameFilter` are set during the\n    // provider/config stage therefore we can optimize here and setup helper functions\n    var customFilter = $animateProvider.customFilter();\n    var classNameFilter = $animateProvider.classNameFilter();\n    var returnTrue = function() { return true; };\n\n    var isAnimatableByFilter = customFilter || returnTrue;\n    var isAnimatableClassName = !classNameFilter ? returnTrue : function(node, options) {\n      var className = [node.getAttribute('class'), options.addClass, options.removeClass].join(' ');\n      return classNameFilter.test(className);\n    };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationDetails(element, animation) {\n      return mergeAnimationDetails(element, animation, {});\n    }\n\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\n    var contains = window.Node.prototype.contains || /** @this */ function(arg) {\n      // eslint-disable-next-line no-bitwise\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\n    };\n\n    function findCallbacks(targetParentNode, targetNode, event) {\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (contains.call(entry.node, targetNode)) {\n            matches.push(entry.callback);\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    function filterFromRegistry(list, matchContainer, matchCallback) {\n      var containerNode = extractElementNode(matchContainer);\n      return list.filter(function(entry) {\n        var isMatch = entry.node === containerNode &&\n                        (!matchCallback || entry.callback === matchCallback);\n        return !isMatch;\n      });\n    }\n\n    function cleanupEventListeners(phase, node) {\n      if (phase === 'close' && !node.parentNode) {\n        // If the element is not attached to a parentNode, it has been removed by\n        // the domOperation, and we can safely remove the event callbacks\n        $animate.off(node);\n      }\n    }\n\n    var $animate = {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n\n        // Remove the callback when the element is removed from the DOM\n        jqLite(container).on('$destroy', function() {\n          var animationDetails = activeAnimationsLookup.get(node);\n\n          if (!animationDetails) {\n            // If there's an animation ongoing, the callback calling code will remove\n            // the event listeners. If we'd remove here, the callbacks would be removed\n            // before the animation ends\n            $animate.off(event, container, callback);\n          }\n        });\n      },\n\n      off: function(event, container, callback) {\n        if (arguments.length === 1 && !isString(arguments[0])) {\n          container = arguments[0];\n          for (var eventType in callbackRegistry) {\n            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);\n          }\n\n          return;\n        }\n\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !disabledElementsLookup.get(node);\n            } else {\n              // (element, bool) - Element setter\n              if (!disabledElementsLookup.has(node)) {\n                // The element is added to the map for the first time.\n                // Create a listener to remove it on `$destroy` (to avoid memory leak).\n                jqLite(element).on('$destroy', removeFromDisabledElementsLookup);\n              }\n              disabledElementsLookup.set(node, !bool);\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    return $animate;\n\n    function queueAnimation(originalElement, event, initialOptions) {\n      // we always make a copy of the options since\n      // there should never be any side effects on\n      // the input data when running `$animateCss`.\n      var options = copy(initialOptions);\n\n      var element = stripCommentsFromElement(originalElement);\n      var node = getDomNode(element);\n      var parentNode = node && node.parentNode;\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      // this is used to trigger callbacks in postDigest mode\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // If animations are hard-disabled for the whole application there is no need to continue.\n      // There are also situations where a directive issues an animation for a jqLite wrapper that\n      // contains only comment nodes. In this case, there is no way we can perform an animation.\n      if (!animationsEnabled ||\n          !node ||\n          !isAnimatableByFilter(node, event, initialOptions) ||\n          !isAnimatableClassName(node, options)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      var documentHidden = $$isDocumentHidden();\n\n      // This is a hard disable of all animations the element itself, therefore  there is no need to\n      // continue further past this point if not enabled\n      // Animations are also disabled if the document is currently hidden (page is not visible\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\n      var skipAnimations = documentHidden || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(node, parentNode, event);\n      }\n\n      if (skipAnimations) {\n        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\n        if (documentHidden) notifyProgress(runner, event, 'start', getEventData(options));\n        close();\n        if (documentHidden) notifyProgress(runner, event, 'close', getEventData(options));\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(node);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        addClass: options.addClass,\n        removeClass: options.removeClass,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n            return existingAnimation.runner;\n          }\n        }\n        var cancelAnimationFlag = isAllowed('cancel', newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationDetails(element, newAnimation);\n            } else {\n              applyGeneratedPreparationClasses($$jqLite, element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationDetails(element, newAnimation);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(node);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        // It is possible that the DOM nodes inside `originalElement` have been replaced. This can\n        // happen if the animated element is a transcluded clone and also has a `templateUrl`\n        // directive on it. Therefore, we must recreate `element` in order to interact with the\n        // actual DOM nodes.\n        // Note: We still need to use the old `node` for certain things, such as looking up in\n        //       HashMaps where it was used as the key.\n\n        element = stripCommentsFromElement(originalElement);\n\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(node);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(node, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', getEventData(options));\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(node);\n          }\n          notifyProgress(runner, event, 'close', getEventData(options));\n        });\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        runInNextPostDigestOrNow(function() {\n          var callbacks = findCallbacks(parentNode, node, event);\n          if (callbacks.length) {\n            // do not optimize this call here to RAF because\n            // we don't know how heavy the callback code here will\n            // be and if this code is buffered then this can\n            // lead to a performance regression.\n            $$rAF(function() {\n              forEach(callbacks, function(callback) {\n                callback(element, phase, data);\n              });\n              cleanupEventListeners(phase, node);\n            });\n          } else {\n            cleanupEventListeners(phase, node);\n          }\n        });\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) {\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(node) {\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);\n        var animationDetails = activeAnimationsLookup.get(child);\n        if (animationDetails) {\n          switch (state) {\n            case RUNNING_STATE:\n              animationDetails.runner.end();\n              /* falls through */\n            case PRE_DIGEST_STATE:\n              activeAnimationsLookup.delete(child);\n              break;\n          }\n        }\n      });\n    }\n\n    function clearElementAnimationState(node) {\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.delete(node);\n    }\n\n    /**\n     * This fn returns false if any of the following is true:\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\n     * c) the element is not a child of the body\n     * d) the element is not a child of the $rootElement\n     */\n    function areAnimationsAllowed(node, parentNode, event) {\n      var bodyNode = $document[0].body;\n      var rootNode = getDomNode($rootElement);\n\n      var bodyNodeDetected = (node === bodyNode) || node.nodeName === 'HTML';\n      var rootNodeDetected = (node === rootNode);\n      var parentAnimationDetected = false;\n      var elementDisabled = disabledElementsLookup.get(node);\n      var animateChildren;\n\n      var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentNode = getDomNode(parentHost);\n      }\n\n      while (parentNode) {\n        if (!rootNodeDetected) {\n          // AngularJS doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootNodeDetected = (parentNode === rootNode);\n        }\n\n        if (parentNode.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentNode) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          var parentNodeDisabled = disabledElementsLookup.get(parentNode);\n\n          if (parentNodeDisabled === true && elementDisabled !== false) {\n            // disable animations if the user hasn't explicitly enabled animations on the\n            // current element\n            elementDisabled = true;\n            // element is disabled via parent element, no need to check anything else\n            break;\n          } else if (parentNodeDisabled === false) {\n            elementDisabled = false;\n          }\n          parentAnimationDetected = details.structural;\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!bodyNodeDetected) {\n          // we also need to ensure that the element is or will be a part of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyNodeDetected = (parentNode === bodyNode);\n        }\n\n        if (bodyNodeDetected && rootNodeDetected) {\n          // If both body and root have been found, any other checks are pointless,\n          // as no animation data should live outside the application\n          break;\n        }\n\n        if (!rootNodeDetected) {\n          // If `rootNode` is not detected, check if `parentNode` is pinned to another element\n          parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);\n          if (parentHost) {\n            // The pin target element becomes the next parent element\n            parentNode = getDomNode(parentHost);\n            continue;\n          }\n        }\n\n        parentNode = parentNode.parentNode;\n      }\n\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\n      return allowAnimation && rootNodeDetected && bodyNodeDetected;\n    }\n\n    function markElementAnimationState(node, state, details) {\n      details = details || {};\n      details.state = state;\n\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.set(node, newValue);\n    }\n  }];\n}];\n\n/** @this */\nvar $$AnimateCacheProvider = function() {\n\n  var KEY = '$$ngAnimateParentKey';\n  var parentCounter = 0;\n  var cache = Object.create(null);\n\n  this.$get = [function() {\n    return {\n      cacheKey: function(node, method, addClass, removeClass) {\n        var parentNode = node.parentNode;\n        var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n        var parts = [parentID, method, node.getAttribute('class')];\n        if (addClass) {\n          parts.push(addClass);\n        }\n        if (removeClass) {\n          parts.push(removeClass);\n        }\n        return parts.join(' ');\n      },\n\n      containsCachedAnimationWithoutDuration: function(key) {\n        var entry = cache[key];\n\n        // nothing cached, so go ahead and animate\n        // otherwise it should be a valid animation\n        return (entry && !entry.isValid) || false;\n      },\n\n      flush: function() {\n        cache = Object.create(null);\n      },\n\n      count: function(key) {\n        var entry = cache[key];\n        return entry ? entry.total : 0;\n      },\n\n      get: function(key) {\n        var entry = cache[key];\n        return entry && entry.value;\n      },\n\n      put: function(key, value, isValid) {\n        if (!cache[key]) {\n          cache[key] = { total: 1, value: value, isValid: isValid };\n        } else {\n          cache[key].total++;\n          cache[key].value = value;\n        }\n      }\n    };\n  }];\n};\n\n/* exported $$AnimationProvider */\n\nvar $$AnimationProvider = ['$animateProvider', /** @this */ function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n  var PREPARE_CLASSES_KEY = '$$animatePrepareClasses';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$Map', '$$rAFScheduler', '$$animateCache',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$Map,   $$rAFScheduler, $$animateCache) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$Map();\n\n      // this is done first beforehand so that the map\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.set(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          element: animation.element,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.set(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      if (isStructural) {\n        element.data(PREPARE_CLASSES_KEY, 'ng-' + event + PREPARE_CLASS_SUFFIX);\n      }\n\n      setRunner(element, runner);\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          var element = animationEntry.from ? animationEntry.from.element : animationEntry.element;\n          var extraClasses = options.addClass;\n\n          extraClasses = (extraClasses ? (extraClasses + ' ') : '') + NG_ANIMATE_CLASSNAME;\n          var cacheKey = $$animateCache.cacheKey(element[0], animationEntry.event, extraClasses, options.removeClass);\n\n          toBeSortedAnimations.push({\n            element: element,\n            domNode: getDomNode(element),\n            fn: function triggerAnimationStart() {\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that we've cached the animation status for this element\n              // and it's in fact an invalid animation (something that has duration = 0)\n              // then we should skip all the heavy work from here on\n              if ($$animateCache.containsCachedAnimationWithoutDuration(cacheKey)) {\n                closeFn();\n                return;\n              }\n\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        var finalAnimations = sortAnimations(toBeSortedAnimations);\n        for (var i = 0; i < finalAnimations.length; i++) {\n          var innerArray = finalAnimations[i];\n          for (var j = 0; j < innerArray.length; j++) {\n            var entry = innerArray[j];\n            var element = entry.element;\n\n            // the RAFScheduler code only uses functions\n            finalAnimations[i][j] = entry.fn;\n\n            // the first row of elements shouldn't have a prepare-class added to them\n            // since the elements are at the top of the animation hierarchy and they\n            // will be applied without a RAF having to pass...\n            if (i === 0) {\n              element.removeData(PREPARE_CLASSES_KEY);\n              continue;\n            }\n\n            var prepareClassName = element.data(PREPARE_CLASSES_KEY);\n            if (prepareClassName) {\n              $$jqLite.addClass(element, prepareClassName);\n            }\n          }\n        }\n\n        $$rAFScheduler(finalAnimations);\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effectively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        tempClasses = (tempClasses ? (tempClasses + ' ') : '') + NG_ANIMATE_CLASSNAME;\n        $$jqLite.addClass(element, tempClasses);\n\n        var prepareClassName = element.data(PREPARE_CLASSES_KEY);\n        if (prepareClassName) {\n          $$jqLite.removeClass(element, prepareClassName);\n          prepareClassName = null;\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          var runner = getRunner(element);\n          if (runner) runner.setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) {\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateSwap\n * @restrict A\n * @scope\n *\n * @description\n *\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\n * be removed and entered in whenever the associated expression changes. A\n * common usecase for this directive is a rotating banner or slider component which\n * contains one image being present at a time. When the active image changes\n * then the old image will perform a `leave` animation and the new element\n * will be inserted via an `enter` animation.\n *\n * @animations\n * | Animation                        | Occurs                               |\n * |----------------------------------|--------------------------------------|\n * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |\n * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |\n *\n * @example\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\n *          deps=\"angular-animate.js\"\n *          animations=\"true\" fixBase=\"true\">\n *   <file name=\"index.html\">\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n *         {{ number }}\n *       </div>\n *     </div>\n *   </file>\n *   <file name=\"script.js\">\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\n *         $scope.number = 0;\n *         $interval(function() {\n *           $scope.number++;\n *         }, 1000);\n *\n *         var colors = ['red','blue','green','yellow','orange'];\n *         $scope.colorClass = function(number) {\n *           return colors[number % colors.length];\n *         };\n *       }]);\n *   </file>\n *  <file name=\"animations.css\">\n *  .container {\n *    height:250px;\n *    width:250px;\n *    position:relative;\n *    overflow:hidden;\n *    border:2px solid black;\n *  }\n *  .container .cell {\n *    font-size:150px;\n *    text-align:center;\n *    line-height:250px;\n *    position:absolute;\n *    top:0;\n *    left:0;\n *    right:0;\n *    border-bottom:2px solid black;\n *  }\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\n *    transition:0.5s linear all;\n *  }\n *  .swap-animation.ng-enter {\n *    top:-250px;\n *  }\n *  .swap-animation.ng-enter-active {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave-active {\n *    top:250px;\n *  }\n *  .red { background:red; }\n *  .green { background:green; }\n *  .blue { background:blue; }\n *  .yellow { background:yellow; }\n *  .orange { background:orange; }\n *  </file>\n * </example>\n */\nvar ngAnimateSwapDirective = ['$animate', function($animate) {\n  return {\n    restrict: 'A',\n    transclude: 'element',\n    terminal: true,\n    priority: 550, // We use 550 here to ensure that the directive is caught before others,\n                   // but after `ngIf` (at priority 600).\n    link: function(scope, $element, attrs, ctrl, $transclude) {\n      var previousElement, previousScope;\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\n        if (previousElement) {\n          $animate.leave(previousElement);\n        }\n        if (previousScope) {\n          previousScope.$destroy();\n          previousScope = null;\n        }\n        if (value || value === 0) {\n          $transclude(function(clone, childScope) {\n            previousElement = clone;\n            previousScope = childScope;\n            $animate.enter(clone, null, $element);\n          });\n        }\n      });\n    }\n  };\n}];\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an AngularJS app.\n *\n * ## Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                     | Supported Animations                                                      |\n * |-------------------------------------------------------------------------------|---------------------------------------------------------------------------|\n * | {@link ng.directive:form#animations form / ngForm}                            | add and remove ({@link ng.directive:form#css-classes various classes})    |\n * | {@link ngAnimate.directive:ngAnimateSwap#animations ngAnimateSwap}            | enter and leave                                                           |\n * | {@link ng.directive:ngClass#animations ngClass / {{class&#125;&#8203;&#125;}  | add and remove                                                            |\n * | {@link ng.directive:ngClassEven#animations ngClassEven}                       | add and remove                                                            |\n * | {@link ng.directive:ngClassOdd#animations ngClassOdd}                         | add and remove                                                            |\n * | {@link ng.directive:ngHide#animations ngHide}                                 | add and remove (the `ng-hide` class)                                      |\n * | {@link ng.directive:ngIf#animations ngIf}                                     | enter and leave                                                           |\n * | {@link ng.directive:ngInclude#animations ngInclude}                           | enter and leave                                                           |\n * | {@link module:ngMessages#animations ngMessage / ngMessageExp}                 | enter and leave                                                           |\n * | {@link module:ngMessages#animations ngMessages}                               | add and remove (the `ng-active`/`ng-inactive` classes)                    |\n * | {@link ng.directive:ngModel#animations ngModel}                               | add and remove ({@link ng.directive:ngModel#css-classes various classes}) |\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                             | enter, leave, and move                                                    |\n * | {@link ng.directive:ngShow#animations ngShow}                                 | add and remove (the `ng-hide` class)                                      |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                             | enter and leave                                                           |\n * | {@link ngRoute.directive:ngView#animations ngView}                            | enter and leave                                                           |\n *\n * (More information can be found by visiting the documentation associated with each directive.)\n *\n * For a full breakdown of the steps involved during each animation event, refer to the\n * {@link ng.$animate `$animate` API docs}.\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by AngularJS when an underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=!bool\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n *\n *   /&#42; if you are using animations instead of transitions you should configure as follows:\n *     animation-delay: 0.1s;\n *     animation-duration: 0s; &#42;/\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ### The `ng-[event]-prepare` class\n *\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\n * before the actual animation starts (after waiting for a $digest).\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\n *\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\n * into elements that have class-based animations such as `ngClass`.\n *\n * ```html\n * <div ng-class=\"{red: myProp}\">\n *   <div ng-class=\"{blue: myProp}\">\n *     <div class=\"message\" ng-if=\"myProp\"></div>\n *   </div>\n * </div>\n * ```\n *\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\n *\n * ```css\n * .message.ng-enter-prepare {\n *   opacity: 0;\n * }\n * ```\n *\n * ### Animating between value changes\n *\n * Sometimes you need to animate between different expression states, whose values\n * don't necessary need to be known or referenced in CSS styles.\n * Unless possible with another {@link ngAnimate#directive-support \"animation aware\" directive},\n * that specific use case can always be covered with {@link ngAnimate.directive:ngAnimateSwap} as\n * can be seen in {@link ngAnimate.directive:ngAnimateSwap#examples this example}.\n *\n * Note that {@link ngAnimate.directive:ngAnimateSwap} is a *structural directive*, which means it\n * creates a new instance of the element (including any other/child directives it may have) and\n * links it to a new scope every time *swap* happens. In some cases this might not be desirable\n * (e.g. for performance reasons, or when you wish to retain internal state on the original\n * element instance).\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the animation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that AngularJS\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]);\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of AngularJS,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#!/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id: 1, title: 'Miss Beulah Roob' },\n            { id: 2, title: 'Trent Morissette' },\n            { id: 3, title: 'Miss Ava Pouros' },\n            { id: 4, title: 'Rod Pouros' },\n            { id: 5, title: 'Abdul Rice' },\n            { id: 6, title: 'Laurie Rutherford Sr.' },\n            { id: 7, title: 'Nakia McLaughlin' },\n            { id: 8, title: 'Jordon Blanda DVM' },\n            { id: 9, title: 'Rhoda Hand' },\n            { id: 10, title: 'Alexandrea Sauer' }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams',\n            function ProfileController($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#!/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an AngularJS application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of AngularJS prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get AngularJS to notice any scope-related changes.)\n */\n\nvar copy;\nvar extend;\nvar forEach;\nvar isArray;\nvar isDefined;\nvar isElement;\nvar isFunction;\nvar isObject;\nvar isString;\nvar isUndefined;\nvar jqLite;\nvar noop;\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [], function initAngularHelpers() {\n  // Access helpers from AngularJS core.\n  // Do it inside a `config` block to ensure `window.angular` is available.\n  noop        = angular.noop;\n  copy        = angular.copy;\n  extend      = angular.extend;\n  jqLite      = angular.element;\n  forEach     = angular.forEach;\n  isArray     = angular.isArray;\n  isString    = angular.isString;\n  isObject    = angular.isObject;\n  isUndefined = angular.isUndefined;\n  isDefined   = angular.isDefined;\n  isFunction  = angular.isFunction;\n  isElement   = angular.isElement;\n})\n  .info({ angularVersion: '1.8.0' })\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\n\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animateCache', $$AnimateCacheProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n","require('./angular-animate');\nmodule.exports = 'ngAnimate';\n","module.exports = __WEBPACK_EXTERNAL_MODULE_angular__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {angularBS} from './lib/angularBS.module';\nexport * from './lib/carousel/carousel.provider';\nexport * from './lib/helpers/angularBS.service';\nexport * from './lib/modal/modal.provider';\nexport {BSModalController} from './lib/modal/bs-modal.directive';\nexport * from './lib/popover/popover.provider';\nexport * from './lib/toasts/toasts.provider';\nexport * from './lib/tooltip/tooltip.provider';\n\nexport default angularBS;\n","/*\n * Twitter Bootstrap 4 plugin for AngularJS.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport { angularBS } from './lib/angularBS.module';\nexport * from './lib/carousel/carousel.provider';\nexport * from './lib/helpers/angularBS.service';\nexport * from './lib/modal/modal.provider';\nexport { BSModalController } from './lib/modal/bs-modal.directive';\nexport * from './lib/popover/popover.provider';\nexport * from './lib/toasts/toasts.provider';\nexport * from './lib/tooltip/tooltip.provider';\nexport default angularBS;\n"],"sourceRoot":""}